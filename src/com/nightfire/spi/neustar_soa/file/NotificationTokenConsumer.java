/**
 * This class is used to make use the read data to insert
 * that information into the respective database tables for various 
 * notifications. 
 *     
 * @author D.Subbarao
 * @version 3.3
 * 
 * @Copyright (c) 2003-04 NeuStar, Inc. All rights reserved. The source code
 * provided herein is the exclusive property of NeuStar, Inc. and is considered
 * to be confidential and proprietary to NeuStar.
 * 
 * @see com.nightfire.framework.util.Debug
 * @see com.nightfire.spi.neustar_soa.utils.SOAConstants
 * @see com.nightfire.spi.neustar_soa.utils.SOAQueryConstants
 * @see com.nightfire.framework.util.FrameworkException
 */

/**
 * History 
 * --------------------- 
 * Rev#    Modified By  Date        Reason
 * ----- -----------    ----------  -------------------------- 
 * 1       Subbarao     03/08/2005  Created 
 * 2       Subbarao     09/02/2005  Removed unnecessary comments.
 * 3	   Subbarao		09/05/2005	Modified.
 * 4	   Subbarao		09/12/2005	Removed default constructor.	
 * 5	   Subbarao		10/10/2005	Modified.	
 * 6	   Subbarao		10/19/2005	Modified Constant names.
 * 7	   Subbarao		10/20/2005  Modified.
 * 8	   Subbarao		10/24/2005	Modified.	
 * 9	   Subbarao		10/25/2005	added throwFrameworkException method.
 * 10	   Subbarao		10/28/2005	Modified.	
 * 11	   Subbarao		11/09/2005 	Modified.	
 * 12	   Subbarao		11/14/2005  Modified.	
 * 13	   Subbarao		11/24/2005  Modified.	
 * 14	   Subbarao		11/30/2005	Modifed a constant.	
 * 15	   Subbarao		12/15/2005	Added conditions.	
 * 16	   Subbarao		12/16/2005	Modified.	
 * 17	   Jigar		08/25/2006	Update the code for TD 4174 & 4175	
 *  	
 */

package com.nightfire.spi.neustar_soa.file;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.StringTokenizer;

import com.nightfire.framework.util.Debug;
import com.nightfire.framework.util.FrameworkException;
import com.nightfire.framework.util.StringUtils;
import com.nightfire.spi.neustar_soa.utils.SOAConstants;
import com.nightfire.spi.neustar_soa.utils.SOAQueryConstants;
import com.nightfire.spi.neustar_soa.utils.SOAUtility;

public class NotificationTokenConsumer extends NotificationTokenConsumerBase {
    
    // This holds a current line of BDD file.
    protected String bddToken = null;
    
    // This holds a partular customer id.
    protected String customerID = null;

    // This holds a particular notification with respect to SOA.
    private String messageSubType = null;
    
    // This holds a particular notification and flag value with respect to SOA.
    private HashMap valueMap = null;
    
    private boolean flag = false;
    //  This holds a name of the request for a particular notification.
    
    private String requestType = null;
    
    // This holds service provider id.
    private String spid = null;

    // This holds a number represents the data in the specified
    // series(general,consecutive,not consecutive).
    private int rangeTypeFormat = 0;

    // This holds an ending telephone number
    private String endingTn = "";

    // This holds startng telephone number
    private String portingTN = "";

    //private String busitimertype = "";
    //This holds a message key that will be generated by the sequence.
    private String msgkey = "";
    
    //This holds a reference key that will be generated by the sequence.
    private String refkey = "";

    private boolean sv_message_success = false;

    private boolean sv_map_success = false;

    private boolean sv_failsplist_success = false;

    private boolean sv_common_success = false;

    private boolean audit_npac_success = false;

    private boolean nbr_poolblk_success = false;
    
    private BDDMapSOANotification bddMapSoaNotifi = null;

    private String className = "NotificationTokenConsumer";
    
    private String methodNm=null;
    
    private String insertSQL = "";
    
    private String  porttnOrAuditId="";
    
    
    /**
     * This gets a database connection that will be used in processing.
     * @throws FrameworkException
     */
    public void init() throws FrameworkException {
        
        // initialize the DB connection
        super.init();
               
    }

    /**
     * Returns the SQL statement used to insert a full row of data into the
     * respective tables.
     * @return String the SQL insert statement.
     */
    protected String getInsertSQL() {

        ArrayList notification = null;

        String methodName="getInsertSQL";
            
        HashMap notificationMap = null;
        

        debugMessage(Debug.MAPPING_STATUS, className,methodName, null, null,
                "Retreving notifications those are mapped for inserting the BDD" +
                " data in SOA database tables.....");
        try{
        
            if(notifyInsert==null)
            
             throw new FrameworkException("It couldn't find the notification" +
             " for the given notification id in the current token");
            
            notificationMap = SOAUtility.notificationsList();

            if (notificationMap.size() > 0) { 

                notification = (ArrayList) notificationMap.get(notifyInsert);
              
            if (notification != null) {

                insertSQL = (String) notification.get(0);

                messageSubType = (String) notification.get(1);

                bddMapSoaNotifi = new BDDMapSOANotification();
                
            } else {
               
                debugMessage(Debug.ALL_ERRORS, className, methodName, null,
                     null,"selected notification couldn't be match in those "
                     + "are mapped from NPAC to SOA");

                System.exit(-1);
            }
        } else {

            debugMessage(Debug.ALL_ERRORS, className, methodName, null, null,
                    "process is failed while Retreiving Notifications to map"
                    + "from NPAC to SOA.");
         }
        }catch(Exception ex){
            
            debugMessage(Debug.ALL_ERRORS,className, methodName, null,
                    null,ex.getMessage());
        }
        return insertSQL;
    }

    /**
     * This method will be used to insert a row of Notification BDD data into
     * the resepective tables.
     * 
     * @param insertStatement
     *            PreparedStatement the precompiled insert statement.
     * @param params
     *            String[] The tokens from a line of input. These values are
     *            used as the parameters of the insertStatement.
     * @throws SQLException
     *             if an error occurs while setting the parameter values on the
     *             insert statement.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    protected void setInsertParams(PreparedStatement insertStatement,
            String[] params) throws SQLException, FrameworkException {
        
        String methodName = "setInsertParams";

        methodNm=methodName;
       
        try {
            
            setFlags();
            
            if (params != null)
                
                if (params[0] != null && params[1] != null) {
                    
                    spid = params[1];
                    
                    int paramLength = params.length - 2;
                    
                    // This will be used to get the message key.
                    getMessageKey();
                    
                    debugMessage(Debug.MAPPING_STATUS, className, methodName,
                            null, null,
                         "will be set all the required parameters for inserting "
                                   + "them into the SOA database table.....");

                    // This block will be executed when Notification FileType is
                    // VersionCancellationAcknowledgeRequestNotification.

                    if (notifyInsert
                            .equalsIgnoreCase
                            (
                SOAConstants.SV_VERSION_CANCELLATION_ACK_REQUEST_NOTIFICATION)){
                        
                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                               " Starting to set all the required parameters of ",
                               notifyInsert,
                               " to insert them into the SOA database"
                               + " tables["+SOAConstants.SOA_SV_MESSAGE+","+
                               SOAConstants.SOA_MESSAGE_MAP+"]");
                        
                        if (paramLength > 7) {

                            if (params[5] != null)

                                rangeTypeFormat = Integer.parseInt(params[5]
                                        .trim());
                            // setNotificationDataForInsert : parameters
                            // [1] - insertStatement,
                            // [2] - RangeTypeFormat
                            // [3] - startingRnTN holds the data when
                            // rangeTypeFormat is either 0 (general) or
                            // 1(consecutive).
                            // [4] - endingRnTn holds the data when
                            // rangeTypeFormat is either 1(consecutive) or 2(Not
                            // Consecutive) else null.
                            // [5] - startingVerId holds the data when
                            // rangeTypeFormat is either 0 (general) or
                            // 1(consecutive) else null.
                            // [6] - endingVerId holds the data when
                            // rangeTypeFormat is either 0 (general) or
                            // 1(consecutive) else null.
                            // [7] - varFldlength will pass the data when
                            // rangeTypeFormat is 2(not consecutive) else null.
                            // [8] - params
                            // [9 - pos, holds the data when rangeTypeFormat is
                            // 2 else null.
                            // [10] - failedVarLength ,[11] -
                            // failedPos,[12]-region

                            if (rangeTypeFormat == 1 && params[6] != null
                                    && params[7] != null && params[8] != null
                                    && params[9] != null) {
                                
                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[6], params[7],
                                        params[8], params[9], null, params, 0,
                                        -1, -1, null);
                                
                            } else if (rangeTypeFormat == 2
                                    && params[6] != null && params[7] != null
                                    && params[8] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[6], params[7],
                                        null, null, params[8], params, 8, -1,
                                        -1, null);
                            } else {
                             
                              generateLogForNullData();
                              
                              throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                                
                            }
                        } else {

                            rangeTypeFormat = 0;

                            if (params[5] != null && params[6] != null)
                                
                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[5], null,
                                        params[6], null, null, params, 0, -1,
                                        -1, null);
                            else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            } 
                        }
                        debugMessage(
                               Debug.MAPPING_STATUS,
                               className,
                               methodName,
                               " Required parameters of ",
                               notifyInsert,
                               " has been set to insert them into the SOA " +
                               "database tables["+SOAConstants.SOA_SV_MESSAGE+","+
                               SOAConstants.SOA_MESSAGE_MAP+"]");

                        setNotificationStatus();

                    }
                    // This block will be executed when Notification FileType is
                    // subscriptionVersionDonorSP-CustomerDisconnectDate.

                    else if (notifyInsert
                            .equalsIgnoreCase
               (SOAConstants.SV_DONORSP_CUSTOMER_DISCONNECTDATE_NOTIFICATION)) {

                        debugMessage(Debug.MAPPING_STATUS,
                             className,methodName,
                             " Starting to set all the required parameters of ",
                             notifyInsert,"to insert them into the SOA database"
                             + " tables["+SOAConstants.SOA_SV_MESSAGE+","+
                             SOAConstants.SOA_MESSAGE_MAP+"]");

                        if (paramLength > 9) {

                            if (params[7] != null)

                                rangeTypeFormat = Integer.parseInt(params[7]
                                        .trim());

                            if (rangeTypeFormat == 1 && params[8] != null
                                    && params[9] != null && params[10] != null
                                    && params[11] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[8], params[9],
                                        params[10], params[11], null, params,
                                        0, -1, -1, null);

                            } else if (rangeTypeFormat == 2
                                    && params[8] != null && params[9] != null
                                    && params[10] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[8], params[9],
                                        null, null, params[10], params, 10, -1,
                                        -1, null);
                            } else  {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                                }

                        } else {
                            
                            rangeTypeFormat = 0;
                            
                            if (params[7] != null && params[8] != null)

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[7], null,
                                        params[8], null, null, params, 0, -1,
                                        -1, null);
                            else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            }  
                        }

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the SOA " +
                                "database tables["+SOAConstants.SOA_SV_MESSAGE+"," +
                                SOAConstants.SOA_MESSAGE_MAP+"]");

                        setNotificationStatus();
                    }

                    // This block will be executed when Notification FileType is
                    // VersionNewSP_CreateRequestNotification.

                    else if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.SV_NEWSP_CREATE_REQUEST_NOTIFICATION)){

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database "
                                + "tables["+SOAConstants.SOA_SV_MESSAGE+","+
                                SOAConstants.SOA_MESSAGE_MAP+"]");

                        if (paramLength > 14) {

                            if (params[12] != null)

                                rangeTypeFormat = Integer.parseInt(params[12]
                                        .trim());

                            if (rangeTypeFormat == 1 && params[13] != null
                                    && params[14] != null && params[15] != null
                                    && params[16] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[13],
                                        params[14], params[15], params[16],
                                        null, params, 0, -1, -1, null);

                            } else if (rangeTypeFormat == 2
                                    && params[13] != null && params[14] != null
                                    && params[15] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[13],
                                        params[14], null, null, params[15],
                                        params, 15, -1, -1, null);
                            } else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            }  

                        } else {
                            rangeTypeFormat = 0;
                            if (params[12] != null && params[13] != null)

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[12], null,
                                        params[13], null, null, params, 0, -1,
                                        -1, null);
                            else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            } 
                        }

                        debugMessage(
                             Debug.MAPPING_STATUS,className,methodName,
                             " Required parameters of ",notifyInsert,
                             " has been set to insert them into the SOA database "
                             + "tables["+SOAConstants.SOA_SV_MESSAGE+","+
                             SOAConstants.SOA_MESSAGE_MAP+"]");

                        setNotificationStatus();
                    }
                    // This block will be executed when Notification FileType is
                    // VersionOldSP_ConcurrenceRequestNotification.

                    else if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.SV_OLDSP_CONCURR_REQUEST_NOTIFICATION)) {
                        
                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database tables"
                                + "["+SOAConstants.SOA_SV_MESSAGE+","+
                                SOAConstants.SOA_MESSAGE_MAP+"]");

                        if (paramLength > 12) {

                            if (params[10] != null)

                                rangeTypeFormat = Integer.parseInt(params[10]
                                        .trim());

                            if (rangeTypeFormat == 1 && params[11] != null
                                    && params[12] != null && params[13] != null
                                    && params[14] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[11],
                                        params[12], params[13], params[14],
                                        null, params, 0, -1, -1, null);

                            } else if (rangeTypeFormat == 2
                                    && params[11] != null && params[12] != null
                                    && params[13] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[11],
                                        params[12], null, null, params[13],
                                        params, 13, -1, -1, null);
                            } else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            } 
                        } else {

                            rangeTypeFormat = 0;

                            if (params[10] != null && params[11] != null)
                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[10], null,
                                        params[11], null, null, params, 0, -1,
                                        -1, null);
                            else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            }
                        }

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Required parameters of ",
                                notifyInsert,
                                "  has been set to insert them into the SOA database "
                                + "tables["+SOAConstants.SOA_SV_MESSAGE+","+
                                SOAConstants.SOA_MESSAGE_MAP+"]");

                        setNotificationStatus();
                    }
                    
                    // This block will be executed when Notification FileType is
                    // subscriptionVersionStatusAttributeValueChange.
                    else if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.VERSION_STS_ATR_VAL_CHAN_NOTIFICATION)) {
                        
                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database"
                                 + " tables["+SOAConstants.SOA_SV_MESSAGE+"," +
                                 SOAConstants.SOA_MESSAGE_MAP + ","+
                                 SOAConstants.SOA_SV_FAILEDSPLIST + "]");
 
                        	if (params[7] != null && params[7].length()<10)
                                rangeTypeFormat = Integer.parseInt(params[7]
                                        .trim());

                            if (rangeTypeFormat == 1 && params[8] != null
                                    && params[9] != null && params[10] != null
                                    && params[11] != null) {
                                
                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[8], params[9],
                                        params[10], params[11], null, params,
                                        0, -1, -1,
                                        null);
                                
                            }else if (rangeTypeFormat == 1 && params[8] != null
                                    && params[9] != null && params[10] != null
                                    && params[11] != null && params[12] != null) {
                                
                            	setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[8], params[9],
                                        params[10], params[11], null, params,
                                        0, Integer.parseInt(params[12]), 12,
                                        null);
                                
                            }else if (rangeTypeFormat == 2 && params[8] != null && params[9] != null
                                    && params[10] != null){
                                
                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[8], params[9],
                                        null, null, params[10], params, 10, -1,
                                        -1, null);
                            }else if (rangeTypeFormat == 0 && params[7] != null 
                            		&& params[8] != null){
                                
                                    setNotificationDataForInsert(insertStatement,
                                            rangeTypeFormat, params[7], null,
                                            params[8], null, null, params, 0, -1,
                                            -1, null);

                                    if(params.length>11){
                                    // This will be executed when this has got failed data.
                                    setFailedSPList(SOAConstants.SV, params[8],
                                            Integer.parseInt(params[9]), 9, params,
                                            null);
                                    
                                    }
                            
                        } else {

                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);

                        }
                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the SOA database "
                                        + "tables["+SOAConstants.SOA_SV_MESSAGE+"," +
                                SOAConstants.SOA_MESSAGE_MAP+","+
                                SOAConstants.SOA_SV_FAILEDSPLIST+"]");
                        setNotificationStatus();
                    }
                    
                    // This will be executed when Notification File Type is
                    // VersionOldSPFinalConcurrenceWindowExpirationNotification
                    else if (notifyInsert
                            .equalsIgnoreCase
                        (SOAConstants.VER_OLDSP_FINAL_CONCUR_WINDOW_EXP_NOTIFICATION)) {

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database "
                                + "tables["+SOAConstants.SOA_SV_MESSAGE+","+
                                SOAConstants.SOA_MESSAGE_MAP+"]");

                        if (paramLength > 9) {

                            if (params[7] != null)

                                rangeTypeFormat = Integer.parseInt(params[7]
                                        .trim());

                            if (rangeTypeFormat == 1 && params[8] != null
                                    && params[9] != null && params[10] != null
                                    && params[11] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[8], params[9],
                                        params[10], params[11], null, params,
                                        0, -1, -1, null);

                            } else if (rangeTypeFormat == 2
                                    && params[8] != null && params[9] != null
                                    && params[10] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[8], params[9],
                                        null, null, params[10], params, 10, -1,
                                        -1, null);
                            } else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            }
                        } else {

                            rangeTypeFormat = 0;

                            if (params[7] != null && params[8] != null)
                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[7], null,
                                        params[8], null, null, params, 0, -1,
                                        -1, null);
                            else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            }
                        }

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the SOA database "
                                + "tables["+SOAConstants.SOA_SV_MESSAGE+","+
                                SOAConstants.SOA_MESSAGE_MAP+"]");

                        setNotificationStatus();
                    }

                    // This will be executed when notification FileType is
                    // VersionNewSPFinalCreateWindowExpirationNotification

                    else if (notifyInsert
                           .equalsIgnoreCase
                         (SOAConstants.VER_NEWSP_FINAL_CREATE_WINDOW_EXP_NOTIFICATION)) {

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database "
                                        + "tables["+SOAConstants.SOA_SV_MESSAGE+","
                                        + SOAConstants.SOA_MESSAGE_MAP+"]");

                        if (paramLength > 15) {

                            if (params[13] != null && params[13].length()<10)

                                rangeTypeFormat = Integer.parseInt(params[13]
                                        .trim());

                            if (rangeTypeFormat == 1 && params[14] != null
                                    && params[15] != null && params[16] != null
                                    && params[17] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[14],
                                        params[15], params[16], params[17],
                                        null, params, 0, -1, -1, null);

                            } else if (rangeTypeFormat == 2
                                    && params[8] != null && params[9] != null
                                    && params[10] != null) {

                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[14],
                                        params[15], null, null, params[16],
                                        params, 16, -1, -1, null);
                            } else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            }

                        } else {

                            rangeTypeFormat = 0;

                            if (params[13] != null && params[14] != null)
                                setNotificationDataForInsert(insertStatement,
                                        rangeTypeFormat, params[13], null,
                                        params[14], null, null, params, 0, -1,
                                        -1, null);
                            else {
                                
                                generateLogForNullData();
                                
                                throw new FrameworkException(
                                        SOAConstants.NULL_ERROR);
                            }
                        }
                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " The required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the SOA database "
                                 + "tables["+SOAConstants.SOA_SV_MESSAGE+","+
                                 SOAConstants.SOA_MESSAGE_MAP+"]");

                        setNotificationStatus();
                    }

                    // This will be executed when notification FileType is
                    // subscriptionAudit-DiscrepancyRpt

                    else if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.SUB_AUDIT_DISCREPANCY_RPT_NOTIFICATION)) {
                        
                        rangeTypeFormat = 0;

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA " +
                                "database table["+ SOAConstants.SOA_AUDIT_NPAC+"]"); 
                        
                        SOAUtility.updateAuditMessage(connection,
                     	         messageSubType,notifyInsert,
                     	         params,portingTN);
                        
                        setAuditCreateDelDiscrepancy(insertStatement, params);
                        
                       if (params[8] != null && params[1] != null)

                           insertRefkeyAndMsgKey(params[8], params[1]);

                         else {
                             
                             generateLogForNullData();
                             
                             throw new FrameworkException(
                                   SOAConstants.NULL_ERROR);
                         }  

                       debugMessage(Debug.MAPPING_STATUS, className,
                               methodName, "] The required parameters of ",
                               notifyInsert,
                               " has been set to insert them into the SOA database "
                              + "table["+SOAConstants.SOA_AUDIT_NPAC+"]");
                       
                       if (audit_npac_success == true)
                           
                            setDataToCommit();
                       else
                            setDataToRollback();
                    }

                    //This will be executed when notification FileType is
                    //subscriptionAuditResults

                    else if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.SUB_AUDIT_RESULTS_NOTIFICATION)) {

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database " +
                                "table["+SOAConstants.SOA_AUDIT_NPAC+"]");

                         SOAUtility.updateAuditMessage(connection,
                      	         messageSubType,notifyInsert,
                      	         params,null);
                         
                       	auditResultsInsert(insertStatement, params);
                         
                        debugMessage(Debug.MAPPING_STATUS, className,
                                methodName, "]"
                                        + " The required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the SOA database "
                                + "table["+SOAConstants.SOA_AUDIT_NPAC+"]");

                    }

                    //This will be executed when notification FileType is
                    //subscriptionAudit-ObjectCreation/subscriptionAudit-ObjectDeletion

                    else if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.SUB_AUDIT_OBJECT_CREATION_NOTIFICATION)
                            || notifyInsert
                             .equalsIgnoreCase
                           (SOAConstants.SUB_AUDIT_OBJECT_DELETION_NOTIFICATION)) {

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database" +
                                " table["+SOAConstants.SOA_AUDIT_NPAC+"]");

                        SOAUtility.updateAuditMessage(connection,
                   	         messageSubType,notifyInsert,
                   	         params,null);
                        
                        setAuditCreateDelDiscrepancy(insertStatement, params);
                        
                        debugMessage(Debug.MAPPING_STATUS, className,
                                methodName, "] The required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the SOA database "
                                + "table[" + SOAConstants.SOA_AUDIT_NPAC +"]");

                        if (audit_npac_success == true)
                            
                            setDataToCommit();
                        
                        else
                            
                            setDataToRollback();
                    }

                    // This will be executed when notification FileType is
                    // subscriptionVersionNewNPA-NXX

                    else if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.SUB_NEW_NPANXX_NOTIFICATION)) {

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database "
                                + "table[" + SOAConstants.SOA_NPANXX_MESSAGE +"]");

                        SOAUtility.updateNetworkDataMessage(connection,
                                messageSubType,notifyInsert,params);
                        
                       
                        subVersionNewNpaNxx(insertStatement, params);
                        
                        debugMessage(Debug.MAPPING_STATUS, className,
                                methodName, "] The required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the " +
                                "SOA database table["+ 
                                SOAConstants.SOA_NPANXX_MESSAGE +"]");

                    }

                    //This will be executed when notification FileType is
                    // either NumberPoolBlockCreationNotification or
                    // NumberPoolBlockAttributeValueChangeNotification.

                    else if (notifyInsert
                         .equalsIgnoreCase
                         (SOAConstants.NBR_POOLBLK_OBJECT_CREATION_NOTIFICATION)){

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database "
                                + "table["+ SOAConstants.SOA_NBRPOOL_BLOCK_MESSAGE
                                + "]");

                        SOAUtility.updateNetworkDataMessage(connection,
                                messageSubType,notifyInsert,params);
                        
                        setNumberPoolBlockData(insertStatement, params, params[7]);
                        
                        debugMessage(Debug.MAPPING_STATUS, className,
                                methodName, "] The required parameters of ",
                                 notifyInsert,
                               " has been set to insert them into the SOA database "
                                 + "table[" + SOAConstants.SOA_NBRPOOL_BLOCK_MESSAGE
                                 + "]");
                     
                    }else if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.NBR_POOLBLK_ATTR_VAL_CHANGE_NOTIFICATION)){

                           debugMessage(
                                   Debug.MAPPING_STATUS,
                                   className,
                                   methodName,
                                   " Starting to set all the required parameters of ",
                                   notifyInsert,
                                   " to insert them into the SOA database "
                                   + "table["+ SOAConstants.SOA_NBRPOOL_BLOCK_MESSAGE
                                   + "]");

                           SOAUtility.updateNetworkDataMessage(connection,
                                   messageSubType,notifyInsert,params);
                           
                           setNumberPoolBlockData(insertStatement, params, params[6]);
                           
                           debugMessage(Debug.MAPPING_STATUS, className,
                                   methodName, "] The required parameters of ",
                                    notifyInsert,
                                  " has been set to insert them into the SOA database "
                                    + "table[" + SOAConstants.SOA_NBRPOOL_BLOCK_MESSAGE
                                    + "]");
                        
                       }

                    //This will be executed when notification FileType is
                    //numberpoolBlockStatusAttributeValueChangeNotification

                    else if (notifyInsert
                          .equalsIgnoreCase
                          (SOAConstants.NBR_POOLBLK_STA_ATTR_VAL_CHANGE_NOTIFICATION)) {

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database " +
                                " tables[" +
                                SOAConstants.SOA_NBRPOOL_BLOCK_MESSAGE + "," +
                                SOAConstants.SOA_SV_FAILEDSPLIST +"]"+messageSubType+" "+notifyInsert);
                        
                        SOAUtility.updateNetworkDataMessage(connection,
                                messageSubType,notifyInsert,params);
                        
                        setNumberPoolBlockStatusAttrChData(insertStatement,
                                    params);

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " The required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the SOA " +
                                "database tables[" +
                                SOAConstants.SOA_NBRPOOL_BLOCK_MESSAGE + "," +
                                SOAConstants.SOA_SV_FAILEDSPLIST +"]");

                        if (params.length > 11 ){
                          //This will be executed when this has got failed data. 
                            if (params[5] != null && params[8] != null)
                          
                            setFailedSPList(SOAConstants.NPB, params[5],
                                    Integer.parseInt(params[8]), 8, params,
                                    null);
                        }
                        else
                            Debug.log(Debug.MAPPING_STATUS, className + "["
                              + methodName +"] There is no failed data for"
                              + notifyInsert);
                        
                        if (nbr_poolblk_success == true)
                            
                            setDataToCommit();
                        
                        else
                            setDataToRollback();

                    }

                    //This will be executed when notification FileType is
                    //either subscriptionVersionNPAC-ObjectCreation

                    else if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.VERSION_OBJECT_CREATION_NOTIFICATION)) {

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database"
                                + " table[" + SOAConstants.SOA_SV_MESSAGE +"," +
                                SOAConstants.SOA_MESSAGE_MAP +"]");

                        if (paramLength > 8) {
                        		
                        	
                            if ((params[15] != null) && (params[15].length() < 10) )

                                rangeTypeFormat = Integer.parseInt(params[15]
                                        .trim());

                            if (rangeTypeFormat == 1 && params[18] != null
                                    && params[19] != null && params[16] != null
                                    && params[17] != null) {
  
                            	setNpacOperationalDataInsert(insertStatement,
                                        params, rangeTypeFormat, params[18],
                                        params[19], 0, 0, params[16], params[17]);

                            } else if (rangeTypeFormat == 2
                                    && params[18] != null && params[19] != null
                                    && params[16] != null && params[17] != null) {

                                setNpacOperationalDataInsert(insertStatement,
                                        params, rangeTypeFormat, null, null,
                                        Integer.parseInt(params[18]), 18,
                                        params[16], params[17]);
                            } else {
                                
                            	rangeTypeFormat = 0;

                                if (params[16] != null && params[15] != null) {
                                	
                                	
                                	
                                    setNpacOperationalDataInsert(insertStatement,
                                            params, rangeTypeFormat, params[16],
                                            null, 0, 0, params[15], null);
                                } else {
                                    
                                    generateLogForNullData();
                                    
                                    throw new FrameworkException(
                                            SOAConstants.NULL_ERROR);
                                }
                            }
                        }

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " The required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the " +
                                "SOA database tables[" +
                                SOAConstants.SOA_SV_MESSAGE +"," +
                                SOAConstants.SOA_MESSAGE_MAP +"]");

                        setNotificationStatus();

                    }
                    
                    // This will be executed when notification FileType is
                    // subscriptionVersionNPAC-attributeValueChange

                    else if (notifyInsert.equalsIgnoreCase
                        (SOAConstants.VERSION_ATR_VAL_CHAN_NOTIFICATION)) {

                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " Starting to set all the required parameters of ",
                                notifyInsert,
                                " to insert them into the SOA database"
                                + " table[" + SOAConstants.SOA_SV_MESSAGE +"," +
                                SOAConstants.SOA_MESSAGE_MAP +"]");

                        if (paramLength > 8) {

                            if (params[11] != null && params[11].length() < 10)

                                rangeTypeFormat = Integer.parseInt(params[11]
                                        .trim());

                            if (rangeTypeFormat == 1 && params[12] != null
                                    && params[13] != null && params[14] != null
                                    && params[15] != null) {

                                setNpacOperationalDataInsert(insertStatement,
                                        params, rangeTypeFormat, params[14],
                                        params[15], 0, 0, params[12], params[13]);

                            } else if (rangeTypeFormat == 2
                                    && params[12] != null && params[13] != null
                                    && params[14] != null && params[15] != null) {

                                setNpacOperationalDataInsert(insertStatement,
                                        params, rangeTypeFormat, null, null,
                                        Integer.parseInt(params[14]), 14,
                                        params[12], params[13]);
                            } else {
                                
                            	rangeTypeFormat = 0;

                                if (params[11] != null && params[12] != null) {

                                    setNpacOperationalDataInsert(insertStatement,
                                            params, rangeTypeFormat, params[12],
                                            null, 0, 0, params[11], null);
                                } else {
                                    
                                    generateLogForNullData();
                                    
                                    throw new FrameworkException(
                                            SOAConstants.NULL_ERROR);
                                }
                            }
                        } 
                        debugMessage(
                                Debug.MAPPING_STATUS,
                                className,
                                methodName,
                                " The required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the " +
                                "SOA database tables[" +
                                SOAConstants.SOA_SV_MESSAGE +"," +
                                SOAConstants.SOA_MESSAGE_MAP +"]");

                        setNotificationStatus();

                    }
                    
                    //This will be executed when notification FileType is
                    //either lnpNPAC-SMS-Operational-Information

                    else if (notifyInsert
                            .equalsIgnoreCase(SOAConstants.LNP_NPAC_SMS_OPER_INFO)) {
                             
                        debugMessage(
                               Debug.MAPPING_STATUS,
                               className,
                               methodName,
                               " Starting to set all the required parameters of ",
                               notifyInsert,
                                " to insert them into the SOA database" +
                                " table["+ SOAConstants.SOA_COMMON_MESSAGE + "]");
                        
                        if (params[0] != null)

                            setNpacDataInsert(insertStatement, params[0], null);
                        
                        else {
                         
                            generateLogForNullData();
                            
                            throw new FrameworkException(
                                    SOAConstants.NULL_ERROR);
                        }
                        debugMessage(Debug.MAPPING_STATUS, className,
                                methodName, " The required parameters of ",
                                notifyInsert,
                                " has been set to insert them into the SOA " +
                                "database tables[" +
                                SOAConstants.SOA_COMMON_MESSAGE + "]");

                        if (sv_common_success == true)
                            
                            setDataToCommit();
                        
                        else
                            
                            setDataToRollback();

                    } else {

                        Debug.log(Debug.DB_STATUS, "Insert failed: "
                                + "Insufficient parameters for the required"
                                + " fields to insert"
                                + "\nAdding in failed List ...");
                        
                        errorFlag = true;
                        
                        params[params.length - 2] = "Insufficient parameters "
                                + "for the required fields to insert";
                        
                        failedList.add(params);

                    }
               }
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }

    }

    /**
     * This method will be used to extract a range from given endingVersionTN
     * and that will be used to make portingTN in a certain format.
     * 
     * @param startVersionTN
     *            contains a portingTn. when rangeTypeFormat is 0 else null.
     * @param startVersionRnTn
     *            contains a starting version telphone number when
     *            rangeTypeFormat is either 1 or 2 else null.
     * @param endVersionTn
     *            contains a Ending version telphone number when rangeTypeFormat
     *            is either 1 or 2 else null.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void portingTNProcess(String startVersionTN,
            String startVersionRnTn, String endVersionTn)
            throws FrameworkException {
    
        String methodName="portingTNProcess";
        
        try {

            //  This will be used to create PortingTN in a desired format basis
            //  on the rangeTypeFormat.
            
            if (rangeTypeFormat == 1 || rangeTypeFormat == 2) {

                if (endVersionTn != null)

                    endingTn = endVersionTn.substring(
                            endVersionTn.length() - 4, endVersionTn.length());

                portingTN = getPortingTN(startVersionRnTn);

            } else {
                portingTN = getPortingTN(startVersionTN);
            }

            debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                    null," The formatted porting tn:"+portingTN);
            
        } catch (Exception ex) {
            
            throwFrameworkException(ex);

        }

    }

    /**
     * This method will be used to return a PoringTn in this selected format.
     * Ex:999-999-9999 / 999-999-9999-9999
     * 
     * @param tn
     *            contains the portingTN.
     * @return portingtn returns the formatted portingTN.
     * @throws FrameworkException is thrown when any error is occurred while 
     * 							  processing the tokinized data.
     */
    private String getPortingTN(String tn) throws FrameworkException {

        StringBuffer portingTn = new StringBuffer();
        
        String methodName="getPortingTN";
        
        try {
            
            debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                    null,"The porting tn: " + tn);
            
            if (tn != null)

                if (tn.length() == 10) {

                    portingTn.append(tn.substring(0, 3));

                    portingTn.append("-");

                    portingTn.append(tn.substring(3, 6));

                    portingTn.append("-");

                    portingTn.append(tn.substring(6, 10));

                    if (rangeTypeFormat == 1 || rangeTypeFormat == 2) {

                        portingTn.append("-");

                        portingTn.append(endingTn);

                    } else if (rangeTypeFormat == 0) {

                        portingTn.append("-");

                        portingTn.append(tn.substring(6, 10));
                    }
                }
        } catch (Exception ex) {
            
            throwFrameworkException(ex);

        }

        return portingTn.toString();
    }

    /**
     * This method will be used to insert the SubscriptionVersion Notifications 
     * data into the respective tables.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert it into a
     *            table.
     * @param rangeTypeFormat
     *            holds a number tells the data will be in a particular format
     *            ex:(general,consecutive,not consecutive).
     * @param startingRnTN
     *            holds the starting version TN.
     * @param endingRnTn
     *            holds the ending version TN.
     * @param startingVerId
     *            holds the starting version ID.
     * @param endingVerId
     *            holds the ending version ID when range type is 1(consecutive).
     * @param varFldlength
     *            holds a number represents the number of version ids when range
     *            type is 2 (Not consecutive).
     * @param params
     *            contains a row of data including n'version ids.
     * @param pos
     *            holds a position of varFldlength field wherein a file.
     * @param failedVarLength
     *            holds a number tells how many failed list in each line of BDD
     *            file.
     * @param failedPos
     *            holds a position where the failed list will be kept in the BDD
     *            file.
     * @param region
     *            holds a region.
     * @throws SQLException
     *             will be thrown when an operation is failed in SQL.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void setNotificationDataForInsert(
            PreparedStatement insertStatement, int rangeTypeFormat,
            String startingRnTN, String endingRnTn, String startingVerId,
            String endingVerId, String varFldlength, String[] params, int pos,
            int failedVarLength, int failedPos, String region)
            throws SQLException, FrameworkException {

        String methodName= "setNotificationDataForInsert";

        try {
            if (params[0] != null) {
                
                debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                        null," The parameters will be  inserted into" +
                        SOAConstants.SOA_SV_MESSAGE + " table for " + notifyInsert);

                if (rangeTypeFormat == 1 || rangeTypeFormat == 2) {
                    
                    portingTNProcess(null, startingRnTN, endingRnTn);
                    
                } else {
                    
                    portingTNProcess(startingRnTN, null, null);
                }
               
                
                // The following two lines will be used to insert the record
                // as request in the SOA_SV_MESSAGE table for each notification.

                    
                if (rangeTypeFormat == 1 || rangeTypeFormat == 2) {

                    if (rangeTypeFormat == 1) {

                        insertRefkeyAndMsgKeyProcess(insertStatement,
                                rangeTypeFormat, startingVerId, endingVerId,
                                null, params, 0, failedVarLength, failedPos,
                                region);
                    } else {
                        insertRefkeyAndMsgKeyProcess(insertStatement,
                                rangeTypeFormat, null, null, varFldlength,
                                params, pos, failedVarLength, failedPos, region);
                    }
                } else {

                    if (notifyInsert
                            .equalsIgnoreCase
                            (SOAConstants.VERSION_STS_ATR_VAL_CHAN_NOTIFICATION)) {

                    	if(params[9] != null){
                    		
                    		messageSubType = bddMapSoaNotifi.getMapVerStatus(
                                    connection,params[1],
                                    startingVerId, Integer.parseInt(params[9]),
                                    params[5], portingTN.substring(0, portingTN
                                            .length() - 5));
                    	}else {
                    		messageSubType = bddMapSoaNotifi.getMapVerStatus(
                                    connection,params[1],
                                    startingVerId, -1,
                                    params[5], portingTN.substring(0, portingTN
                                            .length() - 5));
                    		
                    	}
                        
                        
                        //  This assigns the type of request.	
                        requestType=bddMapSoaNotifi.reqType;
                        
                        if(requestType!=null) {   
                            
                             PreparedStatement requestStatement=
                                  connection.prepareStatement(insertSQL);
                             
                             commonSetRequestData(requestStatement,params[0]);
                        }
                    }
                    
                    if(messageSubType != null)
                    {
                    	SOAUtility.updateSvLastMessage(connection,
                    			messageSubType,params[1],
                    			startingVerId, portingTN.substring(0, portingTN
                    					.length() - 5));
                    }
                    if(messageSubType==null) {
                        
                        throw new FrameworkException
                        		(SOAConstants.MESSAGESUBTYPE_ERROR);
                    }
                    setSubVersionDataInsert(insertStatement, params[0]);

                    insertRefkeyAndMsgKey(startingVerId, spid);
                }
            } else {
                
                generateLogForNullData();
                
                throw new FrameworkException(SOAConstants.REQ_NULL_ERROR
                        + ": CREATETIMESTAMP=" + params[0]);
            }
        } catch (SQLException sqlEx) {
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            throwFrameworkException(ex);
            
        }
    }

    /**
     * This method will be used to get reference key based on SPID and SVID to
     * insert that data into SOA_MESSAGE_MAP TABLE.
     * 
     * @param svid
     *          contains the Subscription version ID.
     * @param spId
     *          contains the Service Provider ID.
     * @throws SQLException
     *          will be thrown when any SQL operation failure is occurred in SQL.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void insertRefkeyAndMsgKey(String svId, String spId)
            throws SQLException, FrameworkException {
        
        String methodName= "insertRefkeyAndMsgKey";
        PreparedStatement insertSoaMsgMap = null;
        PreparedStatement refkeyst = null;
        ResultSet refkeyres = null;
        try {
            String refkey = "";
                      
            //refkeyst stands for reference key statement.
            refkeyst = connection.prepareStatement
            							(SOAQueryConstants.REFKEY_ON_SVID_SPID);

            refkeyst.setString(1, spId.trim());

            refkeyst.setString(2, svId.trim());
            
            //refkeyres stands for reference key resultset.
            refkeyres = refkeyst.executeQuery();

                       
            if (refkeyres.next()) {

                refkey = refkeyres.getString(1);
            }
            

            
            if (refkey != null && !refkey.equals("")) {

                debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                        null, "  Reference key :" + refkey
                                + " is generated by " + "[SVID=" + svId
                                + "] and [SPID=" + spId + "]");
                
                connection.setAutoCommit(false);
                
                insertSoaMsgMap = connection
                        .prepareStatement(SOAConstants.SOA_MSG_MAP);
                
                insertSoaMsgMap.setString(1, msgkey.trim());

                insertSoaMsgMap.setString(2, refkey.trim());

                if (insertSoaMsgMap.executeUpdate() != 0)
                    
                    sv_map_success = true;
                
                
 
            }
            else
                throw new FrameworkException("Reference key does not exist in " +
                        SOAConstants.SV_TABLE + " table with respect to SVID="+
                		svId + ",SPID="+ spid + " ");
            
            
            
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        }catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }finally{
        	try{
        		if(refkeyres != null)
        			refkeyres.close();
        	}catch(Exception dbEx){
        		Debug.log(Debug.SYSTEM_CONFIG,dbEx.toString());
        	}
        	try{
        		if( refkeyst != null)
                    refkeyst.close();
        	}catch(Exception dbEx){
        		Debug.log(Debug.SYSTEM_CONFIG,dbEx.toString());
        	}
        	try{
        		insertSoaMsgMap.close();
        	}catch(Exception dbEx){
        		Debug.log(Debug.SYSTEM_CONFIG,dbEx.toString());
        	}
        }
        
       
    }

    /**
     * This method will be used to provide the messagkey that will be generated
     * by a sequence NeuStarFullSOAMsgKey.
     * 
     * @throws SQLException	is thrown when an operation is failed in SQL.
     * @throws FrameworkException is thrown when any error is occurred while 
     * 							  processing the tokinized data.
     */
    private void getMessageKey() throws SQLException, FrameworkException {
        
        String methodName="getMessageKey";
        PreparedStatement messKeySt = null;
        ResultSet messKeyRes = null;
        try {
            messKeySt = connection
                    .prepareStatement(SOAQueryConstants.MESSAGEKEY_QUERY);
            
            ////messKeyRes stands for MessageKey resultset.
            messKeyRes = messKeySt.executeQuery();

            if (messKeyRes.next()) {

                msgkey = messKeyRes.getString(1);
            }
            
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        }catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }finally{
        	try{
        		if(messKeyRes != null)
        			messKeyRes.close();
        	}catch(Exception dbEx){
        		Debug.log(Debug.SYSTEM_CONFIG,dbEx.toString());
        	}
        	try{
        		if( messKeySt != null)
        			 messKeySt.close();
        	}catch(Exception dbEx){
        		Debug.log(Debug.SYSTEM_CONFIG,dbEx.toString());
        	}
        
        }

    }
    
    /**
     * This method will be used to provide the reference key that will be generated
     * by a sequence NeuStarFullSOARefKey.
     * 
     * @throws SQLException	is thrown when an operation is failed in SQL.
     * @throws FrameworkException is thrown when any error is occurred while 
     * 							  processing the tokinized data.
     */
    private void getReferenceKey() throws SQLException, FrameworkException {
        
        String methodName="getReferenceKey";
        ResultSet refKeyRes = null;
        PreparedStatement refKeySt = null;
        
        try {
            refKeySt = connection
                    .prepareStatement(SOAQueryConstants.REFERENCE_QUERY);
            
            ////refKeyRes stands for ReferenceKey resultset.
            refKeyRes = refKeySt.executeQuery();

            if (refKeyRes.next()) {

                refkey = refKeyRes.getString(1);
            }
          
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        }catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }finally {
        	try{
        		if(refKeyRes != null)
        			refKeyRes.close();
        	}catch(Exception dbEx){
        		Debug.log(Debug.SYSTEM_CONFIG,dbEx.toString());
        	}
        	try{
        		if( refKeySt != null)
        			refKeySt.close();
        	}catch(Exception dbEx){
        		Debug.log(Debug.SYSTEM_CONFIG,dbEx.toString());
        	}
        
        }

    }
    
    /**
     * This method will be used to process for inserting the data into
     * the respective SOA database tables for all notifications data which will 
     * be in general,consecutive and not consecutive format.
     * 
     * @param insertStatment holds the prepared statement to execute associated
     *  query.
     * 
     * @param rangeTypeFormat
     *            contains a number represents either Consecutive/Not
     *            Consecutive
     * @param startSvid
     *            Contains starting subscription version id when rangeType is 1.
     * @param endingSvid
     *            Contains starting subscription version id when rangeType is 1.
     * @param varFieldLength
     *            contains number of version ids when rangeType is 2.
     * @param params
     *            contains a row of data including n'version ids.
     * @param verIdPos
     *            contains the position of a field that tells how many version
     *            ids to be available.
     * @param failedVarLength
     *            holds a number represents how many failed list in each line of
     *            BDD file.
     * @param failedPos
     *            holds a position of failed var length field.
     * @param region
     *            holds a region.
     * @throws FrameworkException is thrown when an error is occurred apart from
     * 		   SQL related.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     *  
     */
    private void insertRefkeyAndMsgKeyProcess(
            PreparedStatement insertStatement, int rangeTypeFormat,
            String startSvid, String endingSvid, String varFieldLength,
            String[] params, int verIdPos, int failedVarLength, int failedPos,
            String region) throws SQLException, FrameworkException {
        
         String methodName= "insertRefkeyAndMsgKeyProcess";
         PreparedStatement requestStatement = null;
          try {
           
             String str = "";

            // This will be used to increase the portingTn to update the
            // lastmessage column in SOA_SUBSCRIPTION_VERSION table.

            int nTn = 0;
            
            String tn = null;

            if (rangeTypeFormat == 1) {
                
                if (startSvid != null && endingSvid != null) {

                    str = " Starting and Ending version ids:[Starting Version ID:"
                            + ""
                            + startSvid
                            + "],[Ending Version ID:"
                            + ""
                            + endingSvid + "]";

                    debugMessage(Debug.MAPPING_STATUS, className, methodName,
                            null, null, str);

                    for (long svid = Long.parseLong(startSvid.trim()); 
                           svid <= Long.parseLong(endingSvid.trim());) {

                        String svID = String.valueOf(svid++);

                        tn = portingTN.substring(0, 8)
                                + String.valueOf(Long.parseLong(portingTN
                                        .substring(8, portingTN.length() - 5))
                                        + nTn++);

                        if (notifyInsert
                                .equalsIgnoreCase
                             (SOAConstants.VERSION_STS_ATR_VAL_CHAN_NOTIFICATION)){

                          messageSubType = bddMapSoaNotifi.getMapVerStatus(
                                    connection,params[1],
                                    svID, failedVarLength, params[5], tn);
                          
                         }
                        else
                            bddMapSoaNotifi.reqType=null;
                        
                        // to update the lastmessage in SOA_SUBSCRIPTION_VERSION 
                        // table for Sv related Notifications.

                         SOAUtility.updateSvLastMessage(connection,
                                    messageSubType,spid,svID, tn);
                            
                         if (nTn == 1) {
                             
                             // This assigns the type of request.
                             requestType=bddMapSoaNotifi.reqType;
                             
                             if(requestType!=null) {   
                                 
                               requestStatement=
                                    connection.prepareStatement(insertSQL);
                                                             
                               commonSetRequestData(requestStatement,params[0]);
                             }

                             if(messageSubType==null)
                                 
                                 throw new FrameworkException
                                 		(SOAConstants.MESSAGESUBTYPE_ERROR);
                             
                             setSubVersionDataInsert(insertStatement,params[0]);
                         }

                        // to insert the messagekey and referencekey into
                        // SOA_MESSAGE_MAP table.
                        insertRefkeyAndMsgKey(svID, spid);
                      
                        //to insert the failed data into SOA_SV_FAILEDSPLIST table.
                         if (notifyInsert
                                .equalsIgnoreCase
                             (SOAConstants.VERSION_STS_ATR_VAL_CHAN_NOTIFICATION)
                             && params.length > 13) {
                             
                            setFailedSPList(SOAConstants.SV, String
                                    .valueOf(svid - 1), failedVarLength,
                                    failedPos, params, region);
                         }

                    }
                } else

                    str = " ] Start and Ending version id might be null:"
                            + "[Starting Version ID:" + startSvid
                            + "],[Ending Version ID:" + endingSvid + "]";
                
                	debugMessage(Debug.MAPPING_STATUS, className, methodName, 
                	        null,null, str);

            } else if (rangeTypeFormat == 2) {

                if (varFieldLength != null)
                if (varFieldLength.length()<5)
                {
                    debugMessage(Debug.MAPPING_STATUS, className, methodName,
                            null, null, "" + "  Number of version ids:"
                                    + varFieldLength);

                    int varflen = Integer.parseInt(varFieldLength);

                    for (int fldCount = 1; fldCount <= varflen;) {

                        tn = portingTN.substring(0, 8)
                                + String.valueOf(Long.parseLong(portingTN
                                        .substring(8, portingTN.length() - 5))
                                        + nTn++);

                        String svID = String.valueOf(params[fldCount++ + verIdPos]);

                        if (notifyInsert
                                .equalsIgnoreCase
                         (SOAConstants.VERSION_STS_ATR_VAL_CHAN_NOTIFICATION)){

                            messageSubType = bddMapSoaNotifi.getMapVerStatus(
                                    connection,params[1],
                                    svID, failedVarLength, params[5], tn);
                        } 
                        else
                            bddMapSoaNotifi.reqType=null;

                  // To update the lastmessage in SOA_SUBSCRIPTION_VERSION table
                  // for Sv related notificatons. 
                        
                        SOAUtility.updateSvLastMessage(connection,
                                     messageSubType,spid, svID, tn);
                        
                        if (nTn == 1) {
                            
                            // This assigns the type of request.	
                            requestType=bddMapSoaNotifi.reqType;
                            
                            if(requestType!=null) {   
                                
                               requestStatement=
                                    connection.prepareStatement(insertSQL);
                               
                               commonSetRequestData(requestStatement,params[0]);
                            }
                           
                            if(messageSubType==null)
                                
                                throw new FrameworkException
                                		(SOAConstants.MESSAGESUBTYPE_ERROR);
                            
                            setSubVersionDataInsert(insertStatement,params[0]);
                        }

                        // to insert the messagekey and referencekey into
                        // SOA_MESSAGE_MAP table.
                        insertRefkeyAndMsgKey(svID, spid);
                        
                        failedPos = varflen + verIdPos + 1;

                        //to insert the failed data into SOA_SV_FAILEDSPLIST table.
                        if (notifyInsert
                                .equalsIgnoreCase
                             (SOAConstants.VERSION_STS_ATR_VAL_CHAN_NOTIFICATION)
                             && params.length > failedPos) 
                        
                        if (params[failedPos] != null) {

                            debugMessage(Debug.MAPPING_STATUS, className,
                                    methodName, null, null,
                                    "" + "  Will be inserting failed data into"
                                   + SOAConstants.SOA_SV_FAILEDSPLIST + " Table");

                            failedVarLength = Integer
                                    .parseInt(params[failedPos]);
                            
                                setFailedSPList(SOAConstants.SV, String
                                        .valueOf(params[(fldCount - 1) + verIdPos]),
                                        failedVarLength, failedPos, params,
                                        null);
                        } else {
                            debugMessage(Debug.MAPPING_STATUS, className,
                                methodName, null, null,
                               "There is no failed data for " + notifyInsert);
                        }
                    }
                } else {
                    
                  debugMessage(Debug.MAPPING_STATUS, className, methodName,
                            null, null," Number of version ids might contain null:"
                            + varFieldLength);
                  
                  throw new FrameworkException("Variable Field length element" +
                  		" is missing in the current token");
                } 
            }
          } catch (SQLException sqlEx) {
              
              methodNm=methodName;
                            
              throwFrameworkException(sqlEx);
              
          } catch (FrameworkException fraEx) {
              
              methodNm=methodName;
              
              throwFrameworkException(fraEx);
              
          } catch (Exception ex) {
              
              methodNm=methodName;
              
              throwFrameworkException(ex);
              
          }finally {
        	try{
        		if( requestStatement != null)
        			requestStatement.close();
        	}catch(Exception dbEx){
        		Debug.log(Debug.SYSTEM_CONFIG,dbEx.toString());
        	}
        
        }

    }

    /**
     * This method will be used to keep the failed SP data includes the
     * SVID,NBPID and ServiceProviderName into the respective table
     * SOA_SV_FAILEDSPLIST.
     * 
     * @param objectType
     *            contains a valid value either SV or NPB.
     * @param id
     *            contains an id of either SV or NPB.
     * @param failedVarFldLength
     *            contains a number tells how many failed list in a line of
     *            BDD file.
     * @param failedPos
     *            contains a position where the failed list will be kept in the
     *            BDD file.
     * @param params
     *            contains a line of data that is extracted from the BDD file.
     * @param region
     *            contains a region.
     * @throws SQLException
     *             will be thrown when an operation is failed in SQL.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     * 
     * 
     */

    private void setFailedSPList(String objectType, String id,
            int failedVarFldLength, int failedPos, String[] params,
            String region) throws SQLException, FrameworkException {
        
        String methodName= "setFailedSPList";
        
        PreparedStatement failedLstCheckSt = null;
        
        PreparedStatement failedLstSt = null;
        
        try {
           
            boolean failedDataExists = false;
            
            if (failedVarFldLength != -1 && failedPos != -1) {

                StringBuffer failedSpList = new StringBuffer();

                failedSpList.append(SOAConstants.FAILED_SPLIST_XML + "\n");

                failedSpList.append(SOAConstants.FAILED_SPLIST_ROOT_START
                        + "\n");

                for (int faildRecCount = 1; faildRecCount <= failedVarFldLength;
                							faildRecCount++) {

                    if (params[failedPos + faildRecCount] != null) {

                        if (params[failedPos + faildRecCount].indexOf("-") != 0) {
                            
                            StringTokenizer spidservicename = new StringTokenizer(
                                    params[failedPos + faildRecCount], "-");
            
                            failedDataExists = true;
                            
                            if (spidservicename.countTokens() > 1) {
                                
                                failedSpList
                                        .append(SOAConstants.FAILED_SPLIST_SPID
                                                + spidservicename.nextToken()
                                                + "\"/>" + "\n");

                                failedSpList
                                 .append(SOAConstants.FAILED_SPLIST_SERVICENAME
                                                + spidservicename.nextToken()
                                                + "\"/>" + "\n");
                            
                                failedDataExists = false;
                                
                            } else
                                
                                failedDataExists = true;
                        }
                        if (failedDataExists == true) {
                            
                            setDataToRollback();
                            
                            throw new FrameworkException(
                                    SOAConstants.NULL_ERROR);
                        }
                    }
                }
                failedSpList.append(SOAConstants.FAILED_SPLIST_ROOT_END);

                if (objectType != null && id != null && failedSpList != null) {

                    // failedLstCheckSt stands for failed list check statement.
                    failedLstCheckSt = connection
                            .prepareStatement
                            (SOAQueryConstants.FAILED_SV_NPB_EXISTS);

                    failedLstCheckSt.setString(1, objectType.trim());

                    failedLstCheckSt.setString(2, id.trim());

                    ResultSet failedExistingRs = failedLstCheckSt
                            .executeQuery();

                    if (failedExistingRs.next()) {
                        
                        debugMessage(Debug.MAPPING_STATUS, className,
                                methodName, null, null,
                                " This notification data already has been " +
                                "inserted");
                         
                        setDataToRollback();
                        
                        throw new FrameworkException(
                          " The failed data already has been " +
                          "inserted for this notification:"+notifyInsert);
                    }
                    connection.setAutoCommit(false);
                    
                    // failedLstSt stands for failed list statement.
                    failedLstSt = connection
                            .prepareStatement(SOAConstants.FAILED_SPLIST_INSERT);

                    failedLstSt.setString(1, objectType.trim());

                    failedLstSt.setString(2, id.trim());

                    failedLstSt.setString(3, failedSpList.toString().trim());

                    failedLstSt.setString(4, region);

                    if (failedLstSt.executeUpdate() != 0)
                        sv_failsplist_success = true;

                    debugMessage(Debug.MAPPING_STATUS, className, methodName,
                            null, null,
                            " Inserting process is completed for FailedSP data" +
                            " into " + SOAConstants.SOA_SV_FAILEDSPLIST + " table");

                } else
                    debugMessage(
                          Debug.MAPPING_STATUS,
                          className,
                          methodName,
                          null,
                          null,
                          "  FailedSP data might contain null values while "
                          + "inserting it into " + SOAConstants.SOA_SV_FAILEDSPLIST 
                          + " table");
            }
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }
		finally {
			if(failedLstCheckSt != null){
				try {
					failedLstCheckSt.close();
				} catch (SQLException e) {
					Debug.log(Debug.ALL_ERRORS, "Error while closing the PrepareStatement: " + e.getMessage());
				}
			}
			
			if(failedLstSt != null){
				try {
					failedLstSt.close();
				} catch (SQLException e) {
					Debug.log(Debug.ALL_ERRORS, "Error while closing the PrepareStatement: " + e.getMessage());
				}
			}
		}
    }

    /**
     * This method will be used to make use the parameters for inserting that
     * into SOA_SV_MESSAGE Table.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert it into a
     *            table.
     * @param params
     *            contains a line of data as parameters.
     * @param rangeTypeFormat
     *            holds a number tells the data will be in a particular format
     *            ex:(general,consecutive,not consecutive).
     * @param startVerID
     *            holds a SubscriptionVersion id when range type is either 0,1
     *            and 2.
     * @param endVerID
     *            holds a SubscriptionVersion id when range type is 1.
     * @param varFldLength
     *            holds a number tells how many SubscriptionVersionId will be
     *            therein each line of data in bdd file.
     * @param pos
     *            holds a position of varFldLength field to seek the
     *            subscriptionVersionIds from that position.
     * @param startingRnTn	holds the starting range Tn or portingtn.
     * @param endignRnTn	holds the ending range tn.	
     * @throws SQLException
     *             will be thrown when any sql operation is failed.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void setNpacOperationalDataInsert(
            PreparedStatement insertStatement, String[] params,
            int rangeTypeFormat, String startVerID, String endVerID,
            int varFldLength, int pos, String startingRnTN, String endingRnTn)
            throws SQLException, FrameworkException {
        
        String methodName= "setNpacOperationalDataInsert";
        
        try {

            String sverid = null;
            
            String tn = null;
            
            int nTn = 0;

            if ((rangeTypeFormat == 1 || rangeTypeFormat == 2)) {
                
            	portingTNProcess(null, startingRnTN, endingRnTn);
                
            } else {
                
                portingTNProcess(startingRnTN, null, null);
                
            }
            // This refers the data in consecutive format.
            if ((rangeTypeFormat == 1) && (!startingRnTN.equalsIgnoreCase(endingRnTn))) {

            	if (startVerID != null && endVerID != null) {

                    debugMessage(
                            Debug.MAPPING_STATUS,
                            className,
                            methodName,
                            null,
                            null,
                            "  Referency key will be generated by SPID and SVID "
                           + "to insert it into " +
                           SOAConstants.SOA_MESSAGE_MAP + " table.");

                    for (long rangeVerId = Long.parseLong(startVerID.trim()); 
                    rangeVerId <= Long.parseLong(endVerID.trim());) {
     
                        sverid = String.valueOf(rangeVerId++);
                        
                        tn = portingTN.substring(0, 8)
                                + StringUtils.padNumber(Integer.parseInt(
                                		portingTN.substring(8, portingTN.length() - 5))+ 
                                		nTn++,SOAConstants.TN_LINE, true,'0');

                        // This will be used for updating the lastmessage column in 
                        // SOA_SUBSCRIPTION_VERSION table on 
                        // subscriptionVersionNPAC-ObjectCreation notification.

                        if (notifyInsert.equals
                           (SOAConstants.VERSION_OBJECT_CREATION_NOTIFICATION )) {
                  	
                       		valueMap = bddMapSoaNotifi.getMapVerObject(
                                        connection, params[1],params[10],
                                         params[0],params[9].equals("")?-1:Integer.parseInt(params[9]),
                                         		sverid,tn, params[11]);
                        	
                            messageSubType = valueMap.get("notification").toString();
                            
                            flag = new Boolean(valueMap.get("flag").toString()).booleanValue();
                            
                            if(flag){
                            	
                            	SOAUtility.updateSvLastMessage(connection,
                                    messageSubType,spid,sverid,tn);
                            }else {
                            	
                            	getReferenceKey();

                            	SOAUtility.insertSOASubscriptionVersion(connection, customerID,
                            			refkey, params, tn, sverid, messageSubType);
                            	
                            	
                            }
                        }
                        // This will be used for updating the lastmessage column in 
                        // SOA_SUBSCRIPTION_VERSION table on 
                        // subscriptionVersionNPAC-attributeValueChange notification.
                        else if (notifyInsert
                                .equals
                           (SOAConstants.VERSION_ATR_VAL_CHAN_NOTIFICATION)) {
                            
                            messageSubType = bddMapSoaNotifi
                                    .getMapVerAttribute(connection,params[1],
                                            sverid, tn,
                                            params[0], -1);
                    
                            SOAUtility.updateSvLastMessage(connection,
                                    messageSubType,params[1],sverid,tn);
                      
                        }
                        else {
                            
                            bddMapSoaNotifi.reqType=null;
                            
                            SOAUtility.updateSvLastMessage(connection,
                                    messageSubType,params[1],sverid,tn);
                        }
                         if (nTn == 1)  {
                             
                             // This assigns the type of request.	
                             requestType=bddMapSoaNotifi.reqType;
                             
                             if(requestType!=null) {   
                                 
                                  PreparedStatement requestStatement=
                                       connection.prepareStatement(insertSQL);
                                  
                               commonSetRequestData(requestStatement,params[0]);
                             }
                             
                             if(messageSubType==null)
                                 
                                 throw new FrameworkException
                                 		(SOAConstants.MESSAGESUBTYPE_ERROR);
                             
                             setSubVersionDataInsert(insertStatement,
                                        params[0]);
                         }      
                          
                          insertRefkeyAndMsgKey(sverid, spid);
                    }
                } else
                    debugMessage(
                            Debug.MAPPING_ERROR,
                            className,
                            methodName,
                            null,
                            null,
                            "  Subscription version id might contain null while"
                             + " generating referency key by SPID and SVID");

            }
            // This refers the data in not consecutive format.
            else if (rangeTypeFormat == 2) {

                if (varFldLength != 0 && pos != 0)
                if (String.valueOf(varFldLength).length()<5)    
                {
                    debugMessage(Debug.MAPPING_STATUS,
                            className,methodName,null,null,
                            "  Referency key will be generated by SPID and SVID "
                            + "to insert it into " +
                            SOAConstants.SOA_MESSAGE_MAP + " table.");

                    for (int varFlength = 1; varFlength <= varFldLength;) {

                        // It holds version id
                        sverid = params[pos + varFlength++];

                        tn = portingTN.substring(0, 8)
                                + StringUtils.padNumber(Integer.parseInt(
                                		portingTN.substring(8, portingTN.length() - 5))+ 
                                		nTn++,SOAConstants.TN_LINE, true,'0');

                        // This will be used for updating the lastmessage column in 
                        // SOA_SUBSCRIPTION_VERSION table on 
                        // subscriptionVersionNPAC-ObjectCreation notification.

                        if (notifyInsert
                                .equals
                           (SOAConstants.VERSION_OBJECT_CREATION_NOTIFICATION)) {
                        	
                        	valueMap = bddMapSoaNotifi.getMapVerObject(
                                    connection, params[1],params[10],
                                     params[0],params[9].equals("")?-1:Integer.parseInt(params[9]),
                                     		sverid,tn, params[11]);
                            
                            messageSubType = valueMap.get("notification").toString();
                            
                            flag = new Boolean(valueMap.get("flag").toString()).booleanValue();
                            
                            if(flag){
                            	
                            	SOAUtility.updateSvLastMessage(connection,
                                        messageSubType,params[1],sverid, tn);
                            }else {
                            	
                            	getReferenceKey();
                            	SOAUtility.insertSOASubscriptionVersion(connection, customerID,
                            			refkey, params, tn, sverid, messageSubType);
                            	
                            }
   
                        }
                        // This will be used for updating the lastmessage column in 
                        // SOA_SUBSCRIPTION_VERSION table on 
                        // subscriptionVersionNPAC-attributeValueChange notification.

                        else if (notifyInsert
                          .equals
                          (SOAConstants.VERSION_ATR_VAL_CHAN_NOTIFICATION)) {

                            messageSubType = bddMapSoaNotifi
                                    .getMapVerAttribute(connection,params[1],
                                            sverid, tn,
                                            params[0], -1);
                            
                            SOAUtility.updateSvLastMessage(connection,
                              messageSubType,params[1],sverid, tn); 
                        }
                        else {
                            
                            bddMapSoaNotifi.reqType=null;
                            
                            SOAUtility.updateSvLastMessage(connection,
                               messageSubType,params[1],sverid,tn);
                        }
                            if (nTn == 1) {
                                
                                // This assigns the type of request.	
                                requestType=bddMapSoaNotifi.reqType;
                                
                                if(requestType!=null) {   
                                    
                                  PreparedStatement requestStatement=
                                      connection.prepareStatement(insertSQL);
                                     
                                  commonSetRequestData(requestStatement,params[0]);
                                }
                            
                            if(messageSubType==null)
                                    
                                    throw new FrameworkException
                                    		(SOAConstants.MESSAGESUBTYPE_ERROR);
                                
                            setSubVersionDataInsert(insertStatement,
                                        params[0]);
                            }

                         insertRefkeyAndMsgKey(sverid, spid);
                      }
                } else {
                    
                    debugMessage(Debug.MAPPING_ERROR, className, methodName,
                            null, null,
                            " Variable Field Length element" +
                    		" is missing in the current token");
                    
                    throw new FrameworkException("Variable Field Length element" +
                    		" is missing in the current token"); 
                }  

            } else {
                // This refers the data in general format.
                if (startVerID != null) {

                    // This will be used for updating the lastmessage column in 
                    // SOA_SUBSCRIPTION_VERSION table on 
                    // subscriptionVersionNPAC-ObjectCreation notification.

                    if (notifyInsert
                            .equals
                       (SOAConstants.VERSION_OBJECT_CREATION_NOTIFICATION)) {
                    	
                    	if(startingRnTN.equalsIgnoreCase(endingRnTn)){

                    		valueMap = bddMapSoaNotifi.getMapVerObject(
                                    connection, params[1],params[10],
                                     params[0],params[9].equals("")?-1:Integer.parseInt(params[9]),
                                     		params[18],portingTN.substring(0, portingTN.length() - 5)
                                     		, params[11]);
                    	}else {
                    		
                    		valueMap = bddMapSoaNotifi.getMapVerObject(
                                    connection, params[1],params[10],
                                     params[0],params[9].equals("")?-1:Integer.parseInt(params[9]),
                                     		params[16],portingTN.substring(0, portingTN.length() - 5)
                                     		, params[11]);
                    	}
                    	
                        messageSubType = valueMap.get("notification").toString();
                        
                        flag = new Boolean(valueMap.get("flag").toString()).booleanValue();
                        
                        if(flag){
                        	if(startingRnTN.equalsIgnoreCase(endingRnTn))
                        	{
                        		SOAUtility.updateSvLastMessage(connection,
                                    messageSubType,params[1],params[18],
                                    portingTN.substring(0, portingTN.length() - 5));
                        	}else{
                        		SOAUtility.updateSvLastMessage(connection,
                                        messageSubType,params[1],params[16],
                                        portingTN.substring(0, portingTN.length() - 5));
                        	}
                        }else {
                        	
                        	getReferenceKey();
                       	
                         	if(startingRnTN.equalsIgnoreCase(endingRnTn))
                        	{
                        		SOAUtility.insertSOASubscriptionVersion(connection, customerID,
                        			refkey, params, portingTN.substring(0, portingTN.length() - 5)
                        			, params[18], messageSubType);
                        	}else{
                        		
                        		SOAUtility.insertSOASubscriptionVersion(connection, customerID,
                            			refkey, params, portingTN.substring(0, portingTN.length() - 5)
                            			, params[16], messageSubType);
                        		
                        	}
                        }
                        
                    }
                    // This will be used for updating the lastmessage column in 
                    // SOA_SUBSCRIPTION_VERSION table on 
                    // subscriptionVersionNPAC-attributeValueChange notification.

                    else if (notifyInsert
                            .equals
                          (SOAConstants.VERSION_ATR_VAL_CHAN_NOTIFICATION)){

                        messageSubType = bddMapSoaNotifi.getMapVerAttribute(
                                connection,params[1],
                                params[12], portingTN.substring(0, portingTN
                                        .length() - 5), params[0], -1);
                        
                        SOAUtility.updateSvLastMessage(connection,
                                messageSubType,params[1],params[12], 
                               portingTN.substring(0, portingTN.length() - 5));
                               	
                    }
                    else  {
                       
                       bddMapSoaNotifi.reqType=null;
                       
                       SOAUtility.updateSvLastMessage(connection,
                               	messageSubType,params[1],params[12], 
                               	portingTN.substring(0, portingTN.length() - 5));
                      }
                    	//	This assigns the type of request.	
                    	requestType=bddMapSoaNotifi.reqType;
                    
	                    if(requestType!=null) {   
	                        
	                      PreparedStatement requestStatement=
	                           connection.prepareStatement(insertSQL);
                             
	                      commonSetRequestData(requestStatement,params[0]);
	                    }
	                    
	                    if(messageSubType==null)
	                        
	                        throw new FrameworkException
	                        		(SOAConstants.MESSAGESUBTYPE_ERROR);
	                    
                        setSubVersionDataInsert(insertStatement, params[0]);
                        
                        debugMessage(Debug.MAPPING_STATUS, className, methodName,
                                null, null,
                        "  Referency key will be generated by SPID and SVID to "
                         + "insert it into " + SOAConstants.SOA_MESSAGE_MAP +
                         " table.");
                        
                        insertRefkeyAndMsgKey(startVerID, spid);
                        
                } else
                    debugMessage(
                            Debug.MAPPING_ERROR,className,methodName,null,
                            null,"  Subscription version id might contain null "
                            + "while generating referency key by SPID" +
                            " and SVID");
            }
            } catch (SQLException sqlEx) {
                
                methodNm=methodName;
                
                throwFrameworkException(sqlEx);
                
            } catch (FrameworkException fraEx) {
                
                methodNm=methodName;
                
                throwFrameworkException(fraEx);
                
            } catch (Exception ex) {
                
                methodNm=methodName;
                
                throwFrameworkException(ex);
                
            }
    }

    /**
     * This method will be used to make use the parameters to insert that 
     * data into SOA_SUBSCRIPTION_VERSION Table. If the record does not exist.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert it into a
     *            table.
     * @param createtimestamp
     *            contains the date and time will be inserted into datetime
     *            column.
     * @throws SQLException
     *             will be thrown when any sql operation is failed.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void setSubVersionDataInsert(PreparedStatement insertStatement,
            String createtimestamp) throws SQLException, FrameworkException {

        String methodName= "setSubVersionDataInsert";

        try {
            if (msgkey != null && spid != null && createtimestamp != null
                    && messageSubType != null) {

                debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                     null,
                    " The parameters will be  inserted into " +
                    SOAConstants.SOA_SV_MESSAGE + " table for " + notifyInsert);

                commonSetData(insertStatement,SOAConstants.RESPONSE);

                insertStatement.setString(8, portingTN);

                Date datetime = parseDate(createtimestamp);
                
                insertStatement.setTimestamp(9, new Timestamp(datetime
                        .getTime()));
                
                insertStatement.setString(10, "MEMO");

                if (insertStatement.executeUpdate() != 0)
                
                    sv_message_success = true;
                
                insertStatement.close();
                
                connection.setAutoCommit(true);

            } else {
                
                generateLogForNullData();
                
                throw new FrameworkException(SOAConstants.REQ_NULL_ERROR
                        + ":MSGKEY=" + msgkey + ",SPID=" + spid
                        + ",CREATETIMESTAMP=" + createtimestamp
                        + ",MESSAGESUBTTYPE=" + messageSubType);
            }
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }
    }

    /**
     * This method will be used to make use the parameters to insert that into
     * SOA_COMMON_MESSAGE Table.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert it into a
     *            table.
     * @param createtimestamp
     *            contains the date and time will be inserted into datetime
     *            column.
     * @param region
     *            contains a region.
     * @throws SQLException
     *             will be thrown when any sql operation is failed.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void setNpacDataInsert(PreparedStatement insertStatement,
            String createtimestamp, String region) throws SQLException,
            FrameworkException {

        String methodName= "setNpacDataInsert";

        try {
            if (msgkey != null && spid != null && createtimestamp != null
                    && messageSubType != null) {

                debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                       null,
                     " The parameters will be  inserted into " +
                     SOAConstants.SOA_COMMON_MESSAGE + " table for " + notifyInsert);

                connection.setAutoCommit(false);

                insertStatement.setString(1, msgkey.trim());

                insertStatement.setString(2, spid.trim());

                insertStatement.setString(3, region);

                Date datetime = parseDate(createtimestamp);

                insertStatement.setTimestamp(4, new Timestamp(datetime
                        .getTime()));

                insertStatement.setString(5, messageSubType.trim());

                insertStatement.setString(6, "MEMO");

                if (insertStatement.executeUpdate() != 0)
                    
                    sv_common_success = true;
                
                insertStatement.close();
                
            } else {
                
                generateLogForNullData();
                
                throw new FrameworkException(SOAConstants.REQ_NULL_ERROR
                        + ":MSGKEY=" + msgkey + ",SPID=" + spid
                        + ",CREATETIMESTAMP=" + createtimestamp
                        + ",MESSAGESUBTTYPE=" + messageSubType);
            }
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }
    }

    /**
     * This method will be used to insert a row of data into the
     * SOA_AUDIT_NPAC table.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert it into
     *            SOA_AUDIT_NPAC table
     * @param params
     *            contains the data of all parameters.
     * @throws SQLException
     *             will be thrown if any sql operation s
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void auditResultsInsert(PreparedStatement insertStatement,
            String[] params) throws SQLException, FrameworkException {
        
        String methodName= "auditResultsInsert";
        
        try {
            if (params[0] != null) {
                
                debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                   null,
                  " The parameters will be  inserted into " +
                  SOAConstants.SOA_AUDIT_NPAC + " table for " + notifyInsert);
                
                connection.setAutoCommit(false);

                commonSetData(insertStatement,SOAConstants.RESPONSE);

                Date datetime = parseDate(params[0]);

                insertStatement.setTimestamp(8, new Timestamp(datetime
                        .getTime()));

                insertStatement.setString(9, "MEMO");

                if (insertStatement.executeUpdate() != 0)
                    
                    setDataToCommit();
                
                else
                
                    setDataToRollback();
                
            } else {
                            
                generateLogForNullData();
                
                throw new FrameworkException(SOAConstants.REQ_NULL_ERROR
                    + ":CREATETIMESTAMP=" + params[0]);
            }
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }
    }

    /**
     * This method will be used to insert a row of data into the
     * SOA_NPANXX_MESSAGEtable.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert it into
     *            SOA_NPANXX_MESSSAGE table
     * @param params
     *            contains the data of all parameters.
     * @throws SQLException
     *             will be thrown if any sql operation s
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */

    private void subVersionNewNpaNxx(PreparedStatement insertStatement,
            String[] params) throws SQLException, FrameworkException {
        
        String methodName= "subVersionNewNpaNxx";
        
        try {

            if (params[0] != null && params[5] != null && params[6] != null) {
                
                debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                 null,
                 " The parameters will be  inserted into " +
                 SOAConstants.SOA_NPANXX_MESSAGE  + " table for " + notifyInsert);
                
                
                // This is used for response.
                commonSetData(insertStatement,SOAConstants.RESPONSE);

                Date datetime = parseDate(params[0]);

                // The following three lines will be used to insert response
                // data in SOA_NPANXX_MESSAGE TABLE.
                insertStatement.setTimestamp(8, new Timestamp(datetime
                        .getTime()));

                insertStatement.setString(9, "MEMO");

                insertStatement.setString(10, params[5]);
                
                if (params[6].length()==7) {
                    if (params[6].indexOf('-') != 0) {
                        StringTokenizer npanxx = new StringTokenizer(params[6],
                                "-");
                        if (npanxx.countTokens() > 1) {
                            
                            insertStatement.setString(11, (String) npanxx
                                    .nextToken());
                            insertStatement.setString(12, (String) npanxx
                                    .nextToken());
                        }
                    }
                }
                else if(params[6].length()==6) {
                    
                    insertStatement.setString(11, params[6].substring(0,3));
                            
                    insertStatement.setString(12, params[6].substring(3,6));
                    
                }
                
                if (insertStatement.executeUpdate() != 0 ) 
                    
                    setDataToCommit();
                
                else
                    
                    setDataToRollback();
                
                insertStatement.close();
                
            } else {

                generateLogForNullData();
                
                throw new FrameworkException(SOAConstants.REQ_NULL_ERROR
                        + ":NPANXX=" + params[6] + ",CREATETIMESTAMP="
                        + params[0]);
            }
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }

    }

    /**
     * This method will be used to insert a row of data into the SOA_AUDIT_NPAC
     * table.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert them into
     *            table.
     * @param params
     *            contains the data of all parameters.
     * @param messageSubtype
     *            contains the filetype as mesagerSubtype.
     * @throws SQLException
     *             will be thrown if any sql operation is failed.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void setAuditCreateDelDiscrepancy(
            PreparedStatement insertStatement, String[] params)
            throws SQLException, FrameworkException {
        
        String methodName= "setAuditCreateDelDiscrepancy";
        
        try {
            
            String auditId = "";
            
            String porttn="";
            
            if (notifyInsert.equals
                    (SOAConstants.SUB_AUDIT_OBJECT_CREATION_NOTIFICATION)
                    || notifyInsert
                            .equals
                     (SOAConstants.SUB_AUDIT_OBJECT_DELETION_NOTIFICATION)) {
                
                if (params[5] != null)
                    
                    auditId = params[5].trim();
                else {
                                  
                    generateLogForNullData();
                    
                    throw new FrameworkException(SOAConstants.REQ_NULL_ERROR
                            + ":PORTINTTN=" + params[5]);
                }
            } else {
                
                if (params[7] != null)
                
                    porttn = getPortingTN(params[7].trim());
                
                else {
                                   
                    generateLogForNullData();
                    
                    throw new FrameworkException(SOAConstants.NULL_ERROR);
                }
            }
            if (params[0] != null && ( !porttn.equals("")  || !auditId.equals(""))) {
              
                debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                        null,
                        " The parameters will be  inserted into" +
                        SOAConstants.SOA_AUDIT_NPAC + " table for " + notifyInsert);
                
                // The following two lines will be used to insert the record
                // as response in the SOA_AUDIT_NPAC table for each notification.

                commonSetData(insertStatement,SOAConstants.RESPONSE);
                
                if(!auditId.equals("")) {
                    
                    porttnOrAuditId=auditId;
                    
                    insertStatement.setString(8, auditId.trim());
                }
                else {
                    
                    porttnOrAuditId=porttn.trim();
                    
                    insertStatement.setString(8, porttn.trim());
                }

                Date datetime = parseDate(params[0].trim());

                insertStatement.setTimestamp(9, new Timestamp(datetime
                        .getTime()));

                insertStatement.setString(10, "MEMO");

                if (insertStatement.executeUpdate() != 0)
                
                    audit_npac_success = true;
                
                insertStatement.close();
                
            } else {
                
                generateLogForNullData();
                
                throw new FrameworkException(SOAConstants.REQ_NULL_ERROR
                        + ":CREATETIMESTAMP=" + params[0] + ",PORTINTTN="
                        + porttn +",AUDITID="+ auditId);
            }
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }
    }

    /**
     * This method will be used to insert a row of data into the
     * SOA_NBRPOOL_BLOCK_MESSAGE table.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert them into a
     *            table
     * @param params
     *            contains the data of all parameters.
     * @throws SQLException
     *             will be thrown if any sql operation is failed.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void setNumberPoolBlockStatusAttrChData(
            PreparedStatement insertStatement, String[] params)
            throws SQLException, FrameworkException {

        String methodName= "setNumberPoolBlockStatusAttrChData";

        try {
            if (params[0] != null && params[5] != null) {

                debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                        null,
                        "The parameters will be  inserted into " +
                        SOAConstants.SOA_NBRPOOL_BLOCK_MESSAGE  + " table for " 
                        + notifyInsert);

                commonSetData(insertStatement,SOAConstants.RESPONSE);

                insertStatement.setString(8, params[5]);

                Date datetime = parseDate(params[0]);
               
                insertStatement.setTimestamp(9, new Timestamp(datetime
                        .getTime()));

                insertStatement.setString(10, "MEMO");

                if (insertStatement.executeUpdate() != 0)
                    
                    nbr_poolblk_success = true;
                
                insertStatement.close();
                
            } else {
                
                generateLogForNullData();
                
                throw new FrameworkException(SOAConstants.REQ_NULL_ERROR
                        + ":CREATETIMESTAMP=" + params[0] + ",NPBID="
                        + params[5]);
            }
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }
    }

    /**
     * This method will be used to insert a row of data into the
     * SOA_NBRPOOL_BLOCK_MESSAGE table.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert it into a
     *            table.
     * @param params
     *            contains the data of all parameters.
     * @throws SQLException
     *             will be thrown if any sql operation is failed.
     * 	@throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void setNumberPoolBlockData(PreparedStatement insertStatement,
            String[] params, String npaNxxX) throws SQLException, FrameworkException {
        
        String methodName= "setNumberPoolBlockData";
        
        try {
            if (params[6] != null && params[0] != null && params[5] != null) {

                debugMessage(Debug.MAPPING_STATUS, className, methodName, null,
                        null, " ] The parameters will be  inserted into "
                                + SOAConstants.SOA_NBRPOOL_BLOCK_MESSAGE +
                                " table for " + notifyInsert);

                // This is used for response.
                commonSetData(insertStatement,SOAConstants.RESPONSE);

                Date datetime = parseDate(params[0].trim());
                
                // The following three lines will be used to insert response data
                // into the SOA_NBRPOOL_BLOCK_MESSAGE table.
                
                insertStatement.setString(8, params[6].trim());

                insertStatement.setTimestamp(9, new Timestamp(datetime
                        .getTime()));

                insertStatement.setString(10, "MEMO");
                
                if (npaNxxX.length() == 7) {

                    // The following three lines will be used to insert response data
                    // into the SOA_NBRPOOL_BLOCK_MESSAGE table.
                    
                    insertStatement.setString(11, npaNxxX.substring(0, 3));

                    insertStatement.setString(12, npaNxxX.substring(3, 6));

                    insertStatement.setString(13, npaNxxX.substring(6, 7));
                }

                if (insertStatement.executeUpdate() != 0 )
                    
                    setDataToCommit();
                
                else
                    
                    setDataToRollback();
                
                insertStatement.close();
                
            } else {
                
                generateLogForNullData();
                                
                throw new FrameworkException(SOAConstants.REQ_NULL_ERROR
                        + ":CREATETIMESTAMP=" + params[0] + ",NPANXX="
                        + params[6] + "NPBID=" + params[5]);
            }
        } catch (SQLException sqlEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(sqlEx);
            
        } catch (FrameworkException fraEx) {
            
            methodNm=methodName;
            
            throwFrameworkException(fraEx);
            
        } catch (Exception ex) {
            
            methodNm=methodName;
            
            throwFrameworkException(ex);
            
        }
    }

    /**
     * This method will be used to provide the common data to be inserted into
     * the respective SOA Database tables.
     * 
     * @param insertStatement
     *            will be used to set all the parameters to insert it into a
     *            table.
     * @param reqOrRes contains the data is either request or response. 
     * 
     * @throws SQLException
     *             will be thrown if any sql operation is failed.
     * @throws FrameworkException is thrown when any application level error is 
     * 							occurred.
     */
    private void commonSetData(PreparedStatement insertStatement,String reqOrRes)
            throws SQLException, FrameworkException {
        
        methodNm="commonSetData";
        
        try {
            connection.setAutoCommit(false);
            
            insertStatement.setString(1, msgkey.trim());
            
            insertStatement.setString(2, reqOrRes);
            
            if(reqOrRes.equals(SOAConstants.REQUEST))
                
                insertStatement.setString(3, requestType);

            else
                insertStatement.setString(3, messageSubType);

            insertStatement.setString(4, customerID);

            insertStatement.setString(5, spid);

            if(reqOrRes.equals(SOAConstants.REQUEST))

                insertStatement.setString(6, SOAConstants.SENT);
            
            else 
                
                insertStatement.setString(6, SOAConstants.RECEIVED);

            insertStatement.setString(7, SOAConstants.SYSTEM);
            
        } catch (SQLException sqlEx) {
            
            throwFrameworkException(sqlEx);
            
        } catch (Exception ex) {
            
            throwFrameworkException(ex);
        }
    }
 /**
  * This will be used to set the data into a statement for creating 
  * a request that is for SV,AUDIT.
  * for 
  * @param reqStatement contains the statment.
  * @param createTimeStamp contains the timestamp.
  * @throws SQLException will be thrown if any sql operation is failed.
  * @throws FrameworkException is thrown when any application level error is 
  * 							occurred.
  */
    private void commonSetRequestData(PreparedStatement reqStatement
            ,String createTimeStamp)
        throws SQLException, FrameworkException {

        methodNm="commonSetRequestData";
        
        try {
            
            connection.setAutoCommit(false);
            
            Date datetime = parseDate(createTimeStamp);
            
            commonSetData(reqStatement,SOAConstants.REQUEST);
            
           	reqStatement.setString(8, portingTN);
            
            reqStatement.setTimestamp(9, new Timestamp(datetime
                    .getTime()));

            reqStatement.setString(10, "MEMO");
            
            reqStatement.executeUpdate();
                
            reqStatement.close();
                
            connection.setAutoCommit(true);
                
            } catch (SQLException sqlEx) {
                
                throwFrameworkException(sqlEx);
                
            } catch (Exception ex) {
                   	
                throwFrameworkException(ex);
            }
        
        
    }

    /**
     * This method will be used to reset all the flags before it inserts the BDD
     * data into SOA database tables for all notifications.
     * @return void
     *  
     */
    private void setFlags() {
        sv_message_success = false;
        sv_map_success = false;
        sv_failsplist_success = false;
        sv_common_success = false;
        audit_npac_success = false;
        nbr_poolblk_success = false;
    }

    /**
     * @return void
     * @throws SQLException
     */
    private void setNotificationStatus() throws SQLException {

        if (sv_message_success == true && sv_map_success == true)
            
            setDataToCommit();
        
        else
            setDataToRollback();
    }

    /**
     * This method will be used to create the log information with various debug
     * levels.
     * 
     * @param debugCode
     *            contains the number describes an error or status
     * @param className
     *            contains the name of class.
     * @param methodName
     *            contains the name of method.
     * @param messageFirst
     *            contains the message.
     * @param notifyInsert
     *            contains the notification type
     * @param messageLast
     *            contains the message.
     */
    private void debugMessage(int debugCode, String className,
            String methodName, String messageFirst, String notifyInsert,
            String messageLast) {

        if (notifyInsert == null)
            Debug.log(debugCode, "[Class : " + className + "],[Method:"
                    + methodName + " ] " + messageLast);
        else
            Debug.log(debugCode, "[Class : " + className + "],[Method:"
                    + methodName + "] " + messageFirst + notifyInsert
                    + messageLast);
    }
    /**
     * This will be used to throw a FrameworkException and generate a content 
     * in log when any error is occurred while some methods are being processed.
     * 
     * @param ex contains an exception which will be thrown in various methods.
     * @param methodName contains the current method.
     * @return void
     */
    private void throwFrameworkException(Exception ex)
    	throws FrameworkException{
        
        debugMessage(Debug.ALL_ERRORS,className, methodNm, null,
                null,ex.getMessage());
        
        throw new FrameworkException(ex.getMessage());
    }
   /**
    * This is used to generate log information when a token has missing some
    * required data.
    * @return void
    */ 
   private void generateLogForNullData(){

       Debug.log(Debug.MAPPING_ERROR,className + "["+ 
          methodNm +" ] Required data is missing " +
          "in this token:"+ bddToken + "to insert that into the SOA database " +
          "tables for " + notifyInsert);
   }

}