/**
 * This processor will generate the Synchronous response message and put the
 * message into the Input location. This processor will get the error 
 * message(s) from error context location generated by RuleProcessor or 
 * DatavalidationProcessor and generate failure response message with error
 * messages with in it. If there is no error message found in the error 
 * context location, this processor will generate success response message.
 * 
 * @author Jigar Talati
 * @version 1.0
 * @Copyright (c) 2003-04 NeuStar, Inc. All rights reserved. The source code
 * provided herein is the exclusive property of NeuStar, Inc. and is considered
 * to be confidential and proprietary to NeuStar.
 * @see	com.nightfire.common.ProcessingException;                        
 * @see	com.nightfire.spi.common.driver.MessageProcessorBase;            
 * @see	com.nightfire.spi.common.driver.MessageProcessorContext;         
 * @see	com.nightfire.spi.common.driver.MessageObject;                   
 * @see	com.nightfire.spi.neustar_soa.utils.SOAConstants;                
 * @see	com.nightfire.framework.util.StringUtils;                        
 * @see	com.nightfire.framework.db.DBInterface;                          
 * @see	com.nightfire.framework.db.DatabaseException;                    
 * @see	com.nightfire.framework.message.MessageException;                
 * @see	com.nightfire.framework.message.generator.xml.XMLMessageGenerator
 * @see	com.nightfire.framework.message.common.xml.XMLMessageBase;       
 * @see	com.nightfire.framework.message.parser.xml.XMLMessageParser;     
 * @see	com.nightfire.framework.util.Debug;                              
 * @see	com.nightfire.framework.util.NVPair;                             
 * @see	com.nightfire.framework.util.CustomerContext;                    
 * @see	com.nightfire.framework.util.FrameworkException;                 
 * 
 */
 
/** 
	Revision History
	---------------------
	Rev#		Modified By 	Date				Reason
	-----       -----------     ----------			--------------------------
	1			Jigar			05/16/2004			Created
  	2			Jigar			05/17/2004			Review Comments 
  													incorporated
	3			Abhijit			05/25/2004			Changed the date format,
													node name and sequence of
													node according to schema.
	4			Abhijit			05/31/2004			Converting the region id 
													to 4 character.
	5			Jigar			07/19/2004			Removed RequestError tag 
													and	Added SOAConstants 
													success/failuer 	
	6			Abhijit			07/20/2004			If any rule or data 
													validation error, then
													don't generate Error
													reply, instead setting 
													the error message in the
													specified context.
	7			Jigar			07/29/2004			Formal review comments 
													incorporated.
	8			Manoj K.		02/01/2007			Modified to support logic
													for partial failure.
	9			Manoj K.		02/08/2007			Review Comments 
  													incorporated
	10			Manoj K.		03/09/2007			Added partialFailureFormat()
													method
	11			Abhijit			05/03/2007			Added comments	
 */

package com.nightfire.spi.neustar_soa.adapter.messageprocessor;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.ArrayList;
import java.util.StringTokenizer;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.nightfire.common.ProcessingException;
import com.nightfire.spi.common.driver.MessageProcessorBase;
import com.nightfire.spi.common.driver.MessageProcessorContext;
import com.nightfire.spi.common.driver.MessageObject;
import com.nightfire.spi.neustar_soa.utils.NANCSupportFlag;
import com.nightfire.spi.neustar_soa.utils.NancPropException;
import com.nightfire.spi.neustar_soa.utils.SOAConstants;
import com.nightfire.framework.util.StringUtils;
import com.nightfire.framework.db.DBInterface;
import com.nightfire.framework.db.DatabaseException;
import com.nightfire.framework.message.MessageException;
import com.nightfire.framework.message.generator.xml.XMLMessageGenerator;
import com.nightfire.framework.message.common.xml.XMLMessageBase;
import com.nightfire.framework.message.common.xml.XMLPlainGenerator;
import com.nightfire.framework.message.parser.xml.XMLMessageParser;
import com.nightfire.framework.monitor.ThreadMonitor;
import com.nightfire.framework.util.Debug;
import com.nightfire.framework.util.NVPair;
import com.nightfire.framework.util.CustomerContext;
import com.nightfire.framework.util.FrameworkException;


public class GenerateSyncResponse extends MessageProcessorBase {
	/**
	 * Get the input source from properties
	 */ 
	private String requestTypeLocation = null;
	
	// for taking the input xml.
	private String partialfailureRequestId = null;
	
	// declaring the variable for checking wether it Api req or gui.
	private String requestType = null;

	
	private String requestStatus = null;	

	/**
	 * Get the service type from properties
	 */ 
	private String serviceType = null;
	
	/**
	 * Get the partial failure support location from properties
	 */ 
	private String partialFailureLocation = null;

	/**
	 * Get the partial failure support value from location
	 */ 
	private String partialFailureSupport = null;

	/**
	* The input location.
	*/
	private String inputLocation = null;

	/**
	 * Get the status from the properties Success/fail
	 */  
	private String status = null;

	/**
	 * Get the requestid from properties
	 */ 
	private String requestId = null;

	/**
	 * The Outputlocation.
	 */  
	private String outputLocation = null;

	/**
	 * Get the RegionId from Properies. 
	 */
	private String regionId = null;

	/**
	 *  Get the The  ActionValue
	 */  
	private String actionValue = null;

	/**
	 * Get the  The  errorMessage
	 */
	private String errorMessage = null;
	
	/**
	 * 	Get the  the  Output Location message status
	 */  		
	private String outLocMessageStatus = null;
	
	/**
	 * 	Get the  the  Output Location Sync Res status
	 */  		
	private String outLocSyncResStatus = null;
	
	private String svUniqueException = "false";
		

	XMLMessageGenerator response = null;
	
	// for getting the error value.
	String errorValue = null;

	// for holding the errorMsg
	private String errorMsg = null;

	/**
	 * This variable contains  MessageObject object
	 */
	private MessageObject input = null;

	/**
	 * This variable contains  MessageProcessorContext object
	 */
	private MessageProcessorContext context = null;
	 
	/**
	 * Get the SPID Location value
	 */
	private String spidLocation = null;
	
	private String spidVal = null;
	/**
	 * To store RequestId support Flag value
	 */
	private String requestIdSupportFlag = null;
	
	/**
	 * To store TN's present in SuccessFailureRequestId message 
	 */
	private String requestTn = null;
	/**
	 * Initializes this object via its persistent properties.
	 *
	 * @param key  Property-key to use for locating initialization properties.
	 * @param type Property-type to use for locating initialization properties.
	 *
	 * @exception ProcessingException when initialization fails
	 */

	public void initialize (String key, String type)
		throws ProcessingException {

		// Call base class method to load the properties.
		super.initialize( key, type );

		// Get configuration properties specific to this processor.
		if ( Debug.isLevelEnabled( Debug.SYSTEM_CONFIG )) {
			Debug.log(
				Debug.SYSTEM_CONFIG,
				"GenerateSyncResponse: Initializing...");
		}
		
		StringBuffer errorBuffer = new StringBuffer( );
		
		// Getting the value from the properties for request type 
		requestTypeLocation = getPropertyValue( SOAConstants.REQUEST_TYPE_PROP );

        if( Debug.isLevelEnabled( Debug.SYSTEM_CONFIG ) ){
			Debug.log( Debug.SYSTEM_CONFIG, "Value of REQUEST_TYPE is ["
											+ requestTypeLocation + "]." );
		}

		// Get requested_id property value using the property  
		//  key name SERVICE_TYPE_PROP.
		serviceType = getRequiredPropertyValue( SOAConstants.SERVICE_TYPE_PROP );
        if( Debug.isLevelEnabled( Debug.SYSTEM_CONFIG ) ){
			Debug.log( Debug.SYSTEM_CONFIG, "Value of SERVICE_TYPE is ["
											+ serviceType + "]." );
		}

		// Get partial fail support location property value using the property  
		//  key name PARTIAL_FAILURE_PROP.
		partialFailureLocation = getPropertyValue( SOAConstants.PARTIAL_FAILURE_PROP );
        
		if( Debug.isLevelEnabled( Debug.SYSTEM_CONFIG ) ){
			Debug.log( Debug.SYSTEM_CONFIG, "Value of PARTIAL_FAILURE is ["
											+ partialFailureLocation + "]." );
		}


		// Get requested_id property value using the property  
		//  key name REQUEST_ID_PROP.
		requestId = getPropertyValue( SOAConstants.REQUEST_ID_PROP );

		// Get action_value  property value using the property name  
		// from ACTION_VALUE_PROP.
		actionValue = getRequiredPropertyValue( SOAConstants.ACTION_VALUE_PROP,
																errorBuffer );

		// Get region-id value  property value using the property name 
		//  from REGION_ID_PROP.
		regionId = getPropertyValue( SOAConstants.REGION_ID_PROP );

		// Get error message value  property value using the property name
		// from ERROR_MESSAGE_LOCATION.
		errorMessage = getRequiredPropertyValue( 
					SOAConstants.INPUT_LOC_ERROR_MESSAGE_PROP,errorBuffer );

		// Get error SuccessFailureRequestId value  property value using the property name
		// from PARTIALFAILURE_MESSAGE.
		partialfailureRequestId = getPropertyValue( 
					SOAConstants.PARTIALFAILURE_ERROR_MESSAGE_PROP);
																
		// Get message status value  property value using the property name
		// from MESSAGE_STATUS_PROP.
		outLocMessageStatus = getRequiredPropertyValue( 
					SOAConstants.MESSAGE_STATUS_PROP, errorBuffer );
																
		// Get sync response status value  property value using the property 
		// name from SYNC_RESPONSE_STATUS_PROP.
		outLocSyncResStatus = getRequiredPropertyValue( 
						SOAConstants.SYNC_RESPONSE_STATUS_PROP,errorBuffer );
									
		// Get sync response output location value  property value using the 
		// property name from SYNC_RESPONSE_OUT_LOC_PROP.
		outputLocation = getRequiredPropertyValue( 
				SOAConstants.SYNC_RESPONSE_OUT_LOC_PROP, errorBuffer );

		// If any of the required properties are absent,indicate error to caller
		if ( errorBuffer.length() > 0 ) 
		{
			
			String errMsg = errorBuffer.toString();
			
			Debug.log( Debug.ALL_ERRORS, errMsg );
			
			throw new ProcessingException( errMsg );
    	}
    	if( Debug.isLevelEnabled( Debug.SYSTEM_CONFIG ) ){
		Debug.log( Debug.SYSTEM_CONFIG, 
							"GenerateSyncResponse: Initialization done." );
		}
							
	}

	/**
	 * Generates Success Syncronous response.
	 *
	 * @param String, List of success TN along with request Id in XML format.
	 * @exception MessageException
	 * @exception ProcessingException 
	 */
	public void successSyncResponse( String requestIdMessage)throws MessageException ,
											ProcessingException
		{
        if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
			Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: Processing the " +
					"successSyncResponse()");
		}

		// Get dateTimeSent  value from  the System Date.
		SimpleDateFormat format = new SimpleDateFormat( 
									SOAConstants.DATE_FORMAT );

		String dateTimeSentValue = format.format( new Date() );	

		String dateTimeSent = getString( dateTimeSentValue );

		// Generate an XML response
		response = new XMLMessageGenerator(SOAConstants.RESPONSE_ROOT);

		response.setValue( SOAConstants.DATESENT, dateTimeSent );

		// If Region Id value is not null
		if (regionId != null){

			int region = -1;

			try 
			{			
				region = Integer.parseInt(regionId);
			}
			catch(NumberFormatException nbrfex){

				throw new MessageException("Invalid Region ID: " + nbrfex);

			}
			
			// Set Region Id in Syncchronous Response XML
			response.setValue( SOAConstants.REGIONID, 
				StringUtils.padNumber( region, 
								SOAConstants.REGION_ID_LEN, true, '0' ) );
			
		}		

		// Set Action in Syncchronous Response XML
		response.setValue( SOAConstants.ACTION_VALUE_PATH, actionValue );		
		
		// If requestStatus is not null set the Value in Syncchronous Response XML
		if (requestStatus != null)
		{
			response.setValue( SOAConstants.REQUEST_STATUS_PATH, requestStatus );	
		}	
		
		// If requestId is not null set the Value in Syncchronous Response XML.
		// The request Id value will not be null for SOA ADMIN request
		if (requestId != null)
		{
			response.setValue( SOAConstants.REQUEST_ID_PATH, requestId );
		}
		// If requestIdMessage exists, requestIdMessage will exists if the
		// request is Subscription Version request
		else if (super.exists(requestIdMessage, context, input) ) {

			String requestIdMessageValue = getString( requestIdMessage, context, input );
		
			int successReqTNNodesLen= 0;
			int failureReqTNNodesLen= 0;						
									
			// Get the Document for requestIdMessage
			XMLMessageParser domMsg = new XMLMessageParser(requestIdMessageValue);				

			// If SuccessRequest node exists
			if (domMsg.exists("SuccessRequest"))
			{
				successReqTNNodesLen = domMsg.getChildCount("SuccessRequest");
				if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
				 Debug.log( Debug.MSG_STATUS, "Child Node count SuccessRequest"+domMsg.getChildCount("SuccessRequest") );
				}
			}
			
			
			// Traverse through all the Success Request Id and set the request
			// Id in Synchronous response XML
			for (int i = 0; i < successReqTNNodesLen; i++) {												

				// Extract Request Id from XML file
				requestId = (String) super.get(requestIdMessage + "."
						+ "SuccessRequest.RequestIdTN"
						+ "(" + i + ").RequestId", context, input);				
				
				// Extract TN from XML file
				requestTn = (String) super.get(requestIdMessage + "."
						+ "SuccessRequest.RequestIdTN"
						+ "(" + i + ").RequestTn", context, input);
				
				/*
				 * Added this check for the support of backward compatibility.
				 * 
				 * If requestIdSupportFlag is "0" then 
				 * 			old synchronous response (RequestId) XML format will be supported.
				 * 
				 * If requestIdSupportFlag is "1" then
				 * 			New synchronous response (RequestIdList) XML format will be supported.
				 * 
				 */				
				if(requestIdSupportFlag != null && requestIdSupportFlag.equals("1")){					
					
					//response.setValue( SOAConstants.SYNCHRONUS_RESPONSE_PATH+".RequestIdList.RequestId("+i+")", requestId );
					response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH + ".TnRequestIdList.TnRequestId(" + i + ")." +
							".Tn", requestTn);					
					
					response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH + ".TnRequestIdList.TnRequestId(" + i + ")." +
							".RequestId", requestId);
					
				}else{
					response.setValue( SOAConstants.REQUEST_ID_PATH, requestId );
					break;
				}
			}
		}
		if ( Debug.isLevelEnabled( Debug.MSG_STATUS )) {

			Debug.log(
				Debug.MSG_STATUS,
				"GenerateSyncResponse: Generated response \n"
					+ response.generate());
		}
		
	}
	/**
	 * Generate Partial Failure Syncronous response, when partial failure is turned on.
	 * @param  errorValue, the error generated by Rule Processor
	 * @param  errMessage, the partial Failure XML generated by SvRequestMasterLogger
	 *
	 * @exception MessageException
	 * @exception ProcessingException 
	 */				
	public void partialFailureFormat(String errorValue ,String errMessage, String requestIdMessage) throws 
									MessageException,ProcessingException
	{
		if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
			Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse:" +
				"Processing the partialFailureFormat() started.");
		}

		

		// Generate an XML response
		response = new XMLMessageGenerator(SOAConstants.RESPONSE_ROOT);

		// Get dateTimeSent  value from  the System Date.
		SimpleDateFormat format = 
		new SimpleDateFormat( SOAConstants.DATE_FORMAT );

		String dateTimeSentValue = format.format( new Date() );	

		String dateTimeSent = getString( dateTimeSentValue );
		
		// Set dateTimeSent in Synchronous response XML
		response.setValue( SOAConstants.DATESENT, dateTimeSent );

		// If Region Id is not null set the same in Synchronous response XML
		if (regionId != null){

			int region = -1;

			try 
			{			
				region = Integer.parseInt(regionId);
			}
			catch(NumberFormatException nbrfex){

				throw new MessageException("Invalid Region ID: " + nbrfex);

			}
			
			response.setValue( SOAConstants.REGIONID, 
				StringUtils.padNumber( region, 
								SOAConstants.REGION_ID_LEN, true, '0' ) );
			
		}		

		// Set the Action in Synchronous response XML
		response.setValue( SOAConstants.ACTION_VALUE_PATH, actionValue );		
		
		// If requestStatus is not null set the same in Synchronous response XML
		if (requestStatus != null)
		{
			response.setValue( SOAConstants.REQUEST_STATUS_PATH,
			 requestStatus );	
		}
		/*
		 * Check if REQUESTIDLIST FLAG is supported.
		 * If supported, then generate TNRequestIdList XML format.
		 * otherwise, old XML format. 
		 */
		if(requestIdSupportFlag != null && requestIdSupportFlag.equals("1")){
	
			int successReqTNNodesLen = 0;
			int failureReqTNNodesLen = 0;
			
			String requestIdMessageValue = null;
			XMLMessageParser domRequestIDMsg = null;
			
			if (super.exists(requestIdMessage, context, input) ) {

				requestIdMessageValue = getString( requestIdMessage, context, input );
				
				domRequestIDMsg = new XMLMessageParser(requestIdMessageValue);
			
				// If FailureRequest node exists in domMsg
				if (domRequestIDMsg.exists("FailureRequest"))
				{
					failureReqTNNodesLen = domRequestIDMsg.getChildCount("FailureRequest");
					if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
					  Debug.log( Debug.MSG_STATUS, "Child Node count FailureRequest"+domRequestIDMsg.getChildCount("FailureRequest") );
					}
				}
				for (int i = 0; i < failureReqTNNodesLen; i++) {												
		
					// Extract Request Id from XML file
					requestId = (String) super.get(requestIdMessage + "."
							+ "FailureRequest.RequestIdTN"
							+ "(" + i + ").RequestId", context, input);
					
					// Extract TN from XML file
					requestTn = (String) super.get(requestIdMessage + "."
							+ "FailureRequest.RequestIdTN"
							+ "(" + i + ").RequestTn", context, input);
										
						response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH + ".SuccessFailureRequestId.FailureRequest.TnRequestIdList.TnRequestId(" + i + ")." +
								".Tn", requestTn);					
						
						response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH + ".SuccessFailureRequestId.FailureRequest.TnRequestIdList.TnRequestId(" + i + ")." +
								".RequestId", requestId);
									
				}
				
				// If SuccessRequest node exists in domMsg
				if (domRequestIDMsg.exists("SuccessRequest"))
				{
					successReqTNNodesLen = domRequestIDMsg.getChildCount("SuccessRequest");
					if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
					 Debug.log( Debug.MSG_STATUS, "Child Node count SuccessRequest"+domRequestIDMsg.getChildCount("SuccessRequest") );
					}
				}			
				for (int i = 0; i < successReqTNNodesLen; i++) {								
		
					// Extract Request Id from XML file
					requestId = (String) super.get(requestIdMessage + "."
							+ "SuccessRequest.RequestIdTN"
							+ "(" + i + ").RequestId", context, input);				
					
					// Extract TN from XML file
					requestTn = (String) super.get(requestIdMessage + "."
							+ "SuccessRequest.RequestIdTN"
							+ "(" + i + ").RequestTn", context, input);							
						
						response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH + ".SuccessFailureRequestId.SuccessRequest.TnRequestIdList.TnRequestId(" + i + ")." +
								".Tn", requestTn);					
						
						response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH + ".SuccessFailureRequestId.SuccessRequest.TnRequestIdList.TnRequestId(" + i + ")." +
								".RequestId", requestId);						
				}
			}
			//populate error XML in to response.
			getErrorXML(errorValue);			
		}
		else{
			
			//Populate error XML in to response.
			getErrorXML(errorValue);			
			
			XMLMessageParser domMsg = new XMLMessageParser(errMessage);

			Document outMsg = domMsg.getDocument();
			
			// Get the root of the node tree to copy to the target.
			Node source = outMsg.getDocumentElement( );

			// Get the target node.
			Node targetNode = response.getNode( SOAConstants.REQUEST_ERROR_PATH );

			// Copy the errMessage in Synchronous Response message 					
			Node copy = XMLMessageBase.copyNode( response.getDocument(), source );
			
			Node parent = targetNode.getParentNode( );
			
			parent.insertBefore( copy, targetNode );
						
			if ( Debug.isLevelEnabled( Debug.MSG_STATUS )) {

				Debug.log(
					Debug.MSG_STATUS,
					"GenerateSyncResponse:partialFailureFormat Generated response \n"
						+ response.generate());
			}
		}
	}
	/**
	 * Generate ErrorXML to populate inside 
	 * the partial failure synchronous response XML.
	 */
	
	public void getErrorXML(String errorValue) throws MessageException, ProcessingException {

		String ruleId = null;

		String ruleMsg = null;

		String ruleContext = null;

		String ruleContextValue = null;

		XMLMessageParser domMsg = new XMLMessageParser(errorValue);

		Document outMsg = domMsg.getDocument();

		Element firstRoot = outMsg.getDocumentElement();

		NodeList ruleIdList = firstRoot.getElementsByTagName("RULE_ID");

		NodeList ruleMsgList = firstRoot.getElementsByTagName("MESSAGE");

		NodeList ruleContextList = firstRoot.getElementsByTagName("CONTEXT");

		NodeList ruleContextValueList = firstRoot.getElementsByTagName("CONTEXT_VALUE");

		// Traverse through all the Rule Id and construct the Partial Failure
		// Synchronous Response as per the new format.
		for (int msgCount = 0; msgCount < ruleIdList.getLength(); msgCount++) {
			Node ruleIdNode = ruleIdList.item(msgCount);

			ruleId = XMLMessageBase.getNodeValue(ruleIdNode);
			if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {
				Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: " + "extracted the ruleid: " + ruleId);
			}

			response.setValue(SOAConstants.RULE_ERROR_PATH + "(" + msgCount + ")" + "." + "RuleId", ruleId);

			Node ruleMsgNode = ruleMsgList.item(msgCount);

			ruleMsg = XMLMessageBase.getNodeValue(ruleMsgNode);
			if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {
				Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: " + "extracted the ruleMsg: " + ruleMsg);
			}

			response.setValue(SOAConstants.RULE_ERROR_PATH + "(" + msgCount + ")" + "." + "RuleMessage", ruleMsg);

			Node ruleContextNode = ruleContextList.item(msgCount);

			ruleContext = XMLMessageBase.getNodeValue(ruleContextNode);
			if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {
				Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: " + "extracted the ruleContext: " + ruleContext);
			}

			response.setValue(SOAConstants.RULE_ERROR_PATH + "(" + msgCount + ")" + "." + "RuleContext", ruleContext);

			Node ruleContextValueNode = ruleContextValueList.item(msgCount);

			ruleContextValue = XMLMessageBase.getNodeValue(ruleContextValueNode);
			if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {
				Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: " + "extracted the ruleContextValue: " + ruleContextValue);
			}

			response.setValue(SOAConstants.RULE_ERROR_PATH + "(" + msgCount + ")" + "." + "RuleContextValue", ruleContextValue);

		}
		if ( Debug.isLevelEnabled( Debug.MSG_STATUS )) {

			Debug.log(
				Debug.MSG_STATUS,
				"GenerateSyncResponse: Generated Error Response XML\n"
					+ response.generate());
		}

	}
	/**
	 * Generates Failure Syncronous response, when partial failure is trurned on.
	 * @param  errorValue, the error generated by Rule Processor
	 * @param  requestIdMessage, the partial Failure XML generated by SvRequestMasterLogger
	 *
	 * @exception MessageException
	 * @exception ProcessingException 
	 */				
	public void failPFSupported(String errorValue, String requestIdMessage) throws 
									MessageException,ProcessingException
	{
		if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
			Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: " +
				"Processing the failPFSupported() started.");
		}

		String ruleId = null;

		String ruleMsg = null;

		String ruleContext = null;

		String ruleContextValue = null;

		// Generate an XML response
		response = new XMLMessageGenerator(SOAConstants.RESPONSE_ROOT);

		// Get dateTimeSent  value from  the System Date.
		SimpleDateFormat format = 
		new SimpleDateFormat( SOAConstants.DATE_FORMAT );

		String dateTimeSentValue = format.format( new Date() );	

		String dateTimeSent = getString( dateTimeSentValue );

		// Set dateTimeSent in Synchronous response XML
		response.setValue( SOAConstants.DATESENT, dateTimeSent );

		// If Region Id is not null set the same in Synchronous response XML
		if (regionId != null){

			int region = -1;

			try 
			{			
				region = Integer.parseInt(regionId);
			}
			catch(NumberFormatException nbrfex){

				throw new MessageException("Invalid Region ID: " + nbrfex);

			}
			
			response.setValue( SOAConstants.REGIONID, 
				StringUtils.padNumber( region, 
								SOAConstants.REGION_ID_LEN, true, '0' ) );
			
		}		

		// Set the Action in Synchronous response XML
		response.setValue( SOAConstants.ACTION_VALUE_PATH, actionValue );		
		
		// If requestStatus is not null set the same in Synchronous response XML
		if (requestStatus != null)
		{
			response.setValue( SOAConstants.REQUEST_STATUS_PATH,
			 requestStatus );	
		}
		
		// If requestId is not null set the Value in Syncchronous Response XML
		// The request Id value will be not null for SOA ADMIN request
		if (requestId != null)
		{
			response.setValue( SOAConstants.REQUEST_ID_PATH, requestId );
		}

		// If requestIdMessage exists, requestIdMessage will exists if the
		// request is Subscription Version request
		else if (super.exists(requestIdMessage, context, input) ) {

			String requestIdMessageValue = getString( requestIdMessage, context, input );
		
			int successReqTNNodesLen= 0;
			int failureReqTNNodesLen= 0;						
									
			// Get the Document for requestIdMessageValue
			XMLMessageParser domMsg = new XMLMessageParser(requestIdMessageValue);				

			// If FailureRequest node exists in domMsg
			if (domMsg.exists("FailureRequest"))
			{
				successReqTNNodesLen = domMsg.getChildCount("FailureRequest");
				if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
				  Debug.log( Debug.MSG_STATUS, "Child Node count FailureRequest"+domMsg.getChildCount("FailureRequest") );
				}
			}

			// Traverse through all the Failure Request Id and set the request
			// Id in Synchronous response XML
			for (int i = 0; i < successReqTNNodesLen; i++) {												

				// Extract Request Id from XML file
				requestId = (String) super.get(requestIdMessage + "."
						+ "FailureRequest.RequestIdTN"
						+ "(" + i + ").RequestId", context, input);
				
				// Extract TN from XML file
				requestTn = (String) super.get(requestIdMessage + "."
						+ "FailureRequest.RequestIdTN"
						+ "(" + i + ").RequestTn", context, input);
				
				/*
				 * Added this check for the support of backward compatibility.
				 * 
				 * If requestIdSupportFlag is "0" then 
				 * 			old synchronous response (RequestId) XML format will be supported.
				 * 
				 * If requestIdSupportFlag is "1" then
				 * 			New synchronous response (RequestIdList) XML format will be supported.
				 * 
				 */				
				if(requestIdSupportFlag != null && requestIdSupportFlag.equals("1")){					
										
					response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH + ".TnRequestIdList.TnRequestId(" + i + ")." +
							".Tn", requestTn);					
					
					response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH + ".TnRequestIdList.TnRequestId(" + i + ")." +
							".RequestId", requestId);
					
				}else{
					response.setValue( SOAConstants.REQUEST_ID_PATH, requestId );
					break;
				}
			}
		}

		XMLMessageParser domMsg = new XMLMessageParser(errorValue);
	
		Document outMsg = domMsg.getDocument();
		
		Element firstRoot = outMsg.getDocumentElement();

		// This contains the elements are containing with ruleid 
		NodeList ruleIdList = firstRoot.getElementsByTagName("RULE_ID"); 

		NodeList ruleMsgList = firstRoot.getElementsByTagName("MESSAGE"); 

		NodeList ruleContextList = 
								firstRoot.getElementsByTagName("CONTEXT"); 

		NodeList ruleContextValueList = 
						firstRoot.getElementsByTagName("CONTEXT_VALUE"); 

		// Traverse through all the Rule Id and construct the Failure 
		// Synchronous Response as per the new format.
		for(int msgCount = 0 ; msgCount < ruleIdList.getLength() ; msgCount++)
		{
			 Node ruleIdNode = ruleIdList.item(msgCount);

			 ruleId = XMLMessageBase.getNodeValue(ruleIdNode);			 
             
			 if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
				 Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: " +
					"extracted the ruleid: " +ruleId);
			 }

			 response.setValue( SOAConstants.RULE_ERROR_PATH +"("
			 +msgCount+")"+"."+"RuleId" , ruleId );

			 Node ruleMsgNode = ruleMsgList.item(msgCount);

			 ruleMsg = XMLMessageBase.getNodeValue(ruleMsgNode);
             if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
				 Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: " +
					"extracted the ruleMsg: " +ruleMsg);
			 }

			 response.setValue( SOAConstants.RULE_ERROR_PATH +"("
			 +msgCount+")"+"."+"RuleMessage", ruleMsg );

			 Node ruleContextNode = ruleContextList.item(msgCount);

			 ruleContext = XMLMessageBase.getNodeValue(ruleContextNode);
             if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
				 Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: " +
					"extracted the ruleContext: " +ruleContext);
			 }

			 response.setValue( SOAConstants.RULE_ERROR_PATH +"("
			 +msgCount+")"+"."+"RuleContext" , ruleContext );

			 Node ruleContextValueNode = ruleContextValueList.item(msgCount);

			 ruleContextValue = 
			 XMLMessageBase.getNodeValue(ruleContextValueNode);
             
			 if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
				 Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: " +
					"extracted the ruleContextValue: " +ruleContextValue);
			 }

			 response.setValue( SOAConstants.RULE_ERROR_PATH +"("
			 +msgCount+")"+"."+"RuleContextValue" ,ruleContextValue );
			 

		}
					
		if ( Debug.isLevelEnabled( Debug.MSG_STATUS )) {

			Debug.log(
				Debug.MSG_STATUS,
				"GenerateSyncResponse: Generated response \n"
					+ response.generate());
		}		
				
	}
	
	

	private XMLMessageGenerator failSVUniqueExpSupported(String errorValue,
			String requestId, String requestStatus, String actionValue,
			String regionId, String dateTimeSent, String tn)
			throws MessageException, ProcessingException {

		if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {

			Debug.log(Debug.MSG_STATUS, "failSVUniqueExpSupported: "
					+ "Processing the failSVUniqueExpSupported() started.");
		}

		String ruleId = null;

		String ruleMsg = null;

		String ruleContext = null;

		String ruleContextValue = null;

		// Generate an XML response
		XMLMessageGenerator response = new XMLMessageGenerator(
				SOAConstants.RESPONSE_ROOT);

		response.setValue(SOAConstants.DATESENT, dateTimeSent);

		if (regionId != null) {

			int region = -1;

			try {
				region = Integer.parseInt(regionId);
			} catch (NumberFormatException nbrfex) {

				throw new MessageException("Invalid Region ID: " + nbrfex);

			}

			response.setValue(SOAConstants.REGIONID, StringUtils.padNumber(
					region, SOAConstants.REGION_ID_LEN, true, '0'));

		}

		response.setValue(SOAConstants.ACTION_VALUE_PATH, actionValue);

		if (requestStatus != null) {
			response.setValue(SOAConstants.REQUEST_STATUS_PATH, requestStatus);
		}

		if (requestId != null && tn != null) {

			String[] tnTokens = tn.split(";");
			List<String> tnList = Arrays.asList(tnTokens);
			int tncount = 0;
			Iterator<String> itr = tnList.iterator();
			while (itr.hasNext()) {

				if (requestIdSupportFlag != null
						&& requestIdSupportFlag.equals("1")) {

					response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH
							+ ".TnRequestIdList.TnRequestId(" + tncount + ")."
							+ ".Tn", itr.next());

					response.setValue(SOAConstants.SYNCHRONUS_RESPONSE_PATH
							+ ".TnRequestIdList.TnRequestId(" + tncount + ")."
							+ ".RequestId", requestId);

				} else {
					response.setValue(SOAConstants.REQUEST_ID_PATH, requestId);
					break;
				}

				tncount++;
			}

		}

		XMLMessageParser domMsg = new XMLMessageParser(errorValue);

		Document outMsg = domMsg.getDocument();

		Element firstRoot = outMsg.getDocumentElement();

		// This contains the elements are containing with ruleid
		NodeList ruleIdList = firstRoot.getElementsByTagName("RULE_ID");

		NodeList ruleMsgList = firstRoot.getElementsByTagName("MESSAGE");

		NodeList ruleContextList = firstRoot.getElementsByTagName("CONTEXT");

		NodeList ruleContextValueList = firstRoot
				.getElementsByTagName("CONTEXT_VALUE");

		// for getting the ruleid
		for (int msgCount = 0; msgCount < ruleIdList.getLength(); msgCount++) {
			Node ruleIdNode = ruleIdList.item(msgCount);

			ruleId = XMLMessageBase.getNodeValue(ruleIdNode);

			if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {

				Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: "
						+ "extracted the ruleid: " + ruleId);
			}

			response.setValue(SOAConstants.RULE_ERROR_PATH + "(" + msgCount
					+ ")" + "." + "RuleId", ruleId);

			Node ruleMsgNode = ruleMsgList.item(msgCount);

			ruleMsg = XMLMessageBase.getNodeValue(ruleMsgNode);

			if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {

				Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: "
						+ "extracted the ruleMsg: " + ruleMsg);
			}

			response.setValue(SOAConstants.RULE_ERROR_PATH + "(" + msgCount
					+ ")" + "." + "RuleMessage", ruleMsg);

			Node ruleContextNode = ruleContextList.item(msgCount);

			ruleContext = XMLMessageBase.getNodeValue(ruleContextNode);

			if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {

				Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: "
						+ "extracted the ruleContext: " + ruleContext);
			}

			response.setValue(SOAConstants.RULE_ERROR_PATH + "(" + msgCount
					+ ")" + "." + "RuleContext", ruleContext);

			Node ruleContextValueNode = ruleContextValueList.item(msgCount);

			ruleContextValue = XMLMessageBase
					.getNodeValue(ruleContextValueNode);

			if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {

				Debug
						.log(Debug.MSG_STATUS, "GenerateSyncResponse: "
								+ "extracted the ruleContextValue: "
								+ ruleContextValue);

			}

			response.setValue(SOAConstants.RULE_ERROR_PATH + "(" + msgCount
					+ ")" + "." + "RuleContextValue", ruleContextValue);

		}

		if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {

			Debug.log(Debug.MSG_STATUS,
					"GenerateSyncResponse: Generated response \n"
							+ response.generate());
		}

		return response;

	}
	
		
	
	
	


	 /**
	 * This method tokenizes the input string and return an
	 * object for exsisting value in context or messageobject.
	 *
	 * @param  locations as a string
	 *
	 * @return  String
	 *
	 * @exception  ProcessingException  Thrown if processing fails.
	 * @exception  MessageException  Thrown if message is bad.

	 */
	private String getValue ( String locations )
								throws MessageException, ProcessingException
	{
		StringTokenizer st = new StringTokenizer( locations,
								MessageProcessorBase.SEPARATOR );

		String tok = null;

		while ( st.hasMoreTokens() )
		{
			tok = st.nextToken( );
            if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
				Debug.log( Debug.MSG_STATUS, "Checking location ["
									  + tok + "] for value..." );
			}

			if ( exists( tok, context, input ) )
			{

				return( ( String ) get( tok, context, input ) );

			}
		}

		return null;
	}
	
	
	



  /**
	* Populate the XML document with new node values.
	*
	* @param  context The context
	* @param  input  Input message to process.
	*
	* @return  The given input, or null.
	*
	* @exception  ProcessingException  Thrown if processing fails.
	* @exception  MessageException  Thrown if message is bad.
	*/

	public NVPair[] process (MessageProcessorContext context,
		MessageObject input)
		throws MessageException, ProcessingException {
		
		ThreadMonitor.ThreadInfo tmti = null;
        
		if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
		  Debug.log(Debug.MSG_STATUS, "GenerateSyncResponse: Processing ... ");
		}
		
		// this is not a batching processor, so if the input it null,
		// then return null
		if(input == null){
		
			return null;
				
		}

		this.context = context ;

		this.input = input ;
		try
		{
		tmti = ThreadMonitor.start( "Message-processor [" + getName() + "] started generating sync response" );
		// Get region from  the context.
		if ( regionId != null && exists( regionId, context, input ) )
		{
				regionId = getString( regionId, context, input );
		}
		else 
		{

			regionId = null;

		}
		
		 
		
		if ( exists( SOAConstants.IS_SV_UNIQUE_EXCEPTION, context, input ) ){
			
			// Getting the value for SV Unique Exception from location.
			svUniqueException = getString(SOAConstants.IS_SV_UNIQUE_EXCEPTION, context, input);
			
		}
		if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {
				Debug.log(Debug.MSG_STATUS, "SV unique Exception got from context : ["
						+ svUniqueException + "]");
			}
		
		
		// If REQUEST_TYPE property is configured
		if(requestTypeLocation != null){

			if ( exists( requestTypeLocation, context, input ) ){
			
				// Getting the value for request type from location.
				requestType = getString(requestTypeLocation, context, input);
			}
		}
		
		// If PARTIALFAILURE_MESSAGE_LOC property is configured
		if(partialFailureLocation != null){

			if ( exists( partialFailureLocation, context, input ) ){
			
				// getting the value for partial fail support from location.
				partialFailureSupport = getString(partialFailureLocation, 
											context,input);
			}
		}
		
		// If REQUESTID	property is configured
		if (requestId != null)
		{
			//Get requestedId value from  the context.
			requestId = getValue( requestId );
		}
		

		// Get actionValue  value from  the context.
		actionValue = getString( actionValue, context, input );
	 
		ArrayList successTnList = null;

		// Get the success TN list from Customer Context
		try{
			
			successTnList = 
			(ArrayList)CustomerContext.getInstance().get("successTNList");
					
		}catch(FrameworkException ex){
			if( Debug.isLevelEnabled( Debug.SYSTEM_CONFIG ) ){
			Debug.log(Debug.SYSTEM_CONFIG, "GenerateSyncResponse: " +
				"unable to get successTNList from the context " 
			+ex.getMessage());
			}
		
		}
		
		// If there is any Rule error
		if ( exists( errorMessage, context, input ) ){
			
			errorValue = getString( errorMessage, context, input );
				
		}

		// If there is a partial failure
		if ( exists( partialfailureRequestId , context, input ) ){
			
			 errorMsg = getString( partialfailureRequestId, context, input );
				
		}
		// Get the SPID Location property value
		if ( exists( SOAConstants.SPID_LOC, context, input ) ){
		
			spidVal = getString(SOAConstants.SPID_LOC, context, input);
		}else{
			spidVal = null;
		}
		/*
		 * check for the RequestId support flag for a SPID
		 */
		try{
			if ( spidVal != null){	
				requestIdSupportFlag = String.valueOf(NANCSupportFlag.getInstance(spidVal).getRequestIdListFlag());
			
			}
			else{
					requestIdSupportFlag = "0";
			}
		}
		catch(Exception nex){
			
			Debug.log(Debug.ALL_WARNINGS, StringUtils.getClassName(this)
					+ nex.getMessage());
		}
		
		// If there is Rule error
		if ( errorValue != null && !errorValue.equals( "" )){
			
			// If service type is SOAADMIN
			if (serviceType.equals(SOAConstants.SOA_ADMIN))
			{
				requestStatus = SOAConstants.FAILURE;								
			}

			// If service type is SOA
			if (serviceType.equals(SOAConstants.SOA) )
			{
				if (svUniqueException.equalsIgnoreCase("true"))
				{
						if (Debug.isLevelEnabled(Debug.MSG_STATUS)) {
							Debug
									.log(Debug.MSG_STATUS,
											"SV unique Exception got from context is true");
						}
						XMLMessageGenerator resp = null;
						Document xpgDoc = null;
						Element element = null;
						NodeList nodeList = null;
						String tnValue = null;
						XMLPlainGenerator xpgObj = new XMLPlainGenerator(
								getString(input.getDOM()));
						xpgDoc = xpgObj.getDocument();
						element = xpgDoc.getDocumentElement();
						nodeList = element.getElementsByTagName("Tn");
						Element temp = (Element) nodeList.item(0);
						if (temp != null) {
							tnValue = temp.getAttribute("value");
							if (Debug.isLevelEnabled(Debug.MSG_STATUS))
								Debug.log(Debug.MSG_STATUS,
										"The value of <Tn> node is +"
												+ tnValue.toString());
						}

						SimpleDateFormat format = new SimpleDateFormat(
								SOAConstants.DATE_FORMAT);

						String dateTimeSentValue = format.format(new Date());

						String dateTimeSent = getString(dateTimeSentValue);

						resp = failSVUniqueExpSupported(errorValue, requestId,
								SOAConstants.FAILURE, actionValue, regionId,
								dateTimeSent, tnValue);
						if (Debug.isLevelEnabled(Debug.MSG_STATUS))
							Debug.log(Debug.MSG_STATUS,
									"Generated Response from failSVUniqueExpSupported (): +"
											+ resp.generate());

						// Set the response into the output location
						super.set(outputLocation, context, input, resp
								.generate());

						// Set the sent status into the output location
						super.set(outLocMessageStatus, context, input,
								SOAConstants.SENT_STATUS);

						// Set the request status into the output location
						super.set(outLocSyncResStatus, context, input,
								SOAConstants.FAILURE);

						return formatNVPair(input);
					}
				
				// If there is no success TN, in case of complete failure
				if ( successTnList == null || successTnList.get(0) == null )
				{
					requestStatus = SOAConstants.FAILURE;
                    if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
						Debug.log(Debug.MSG_STATUS,
							"GenerateSyncResponse1: Generated response for failure status" );
					}
				}
				// If it is a partail failure
				else {
					// If it is a GUI request
					if (requestType != null && requestType.equals(SOAConstants.GUI_REQUEST))
					{
						requestStatus = SOAConstants.PARTIAL_FAILURE;
						if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
							Debug.log(Debug.MSG_STATUS,
							"GenerateSyncResponse2: Generated response for partial failureStatus");
						}
					}
					// If it is not a GUI request
					else {
						if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
							Debug.log(Debug.MSG_STATUS,
							"GenerateSyncResponse3: Generated response partialFailureSupport partialFailureSupport");
						}

						// If partial failure support is turned off
						if(partialFailureSupport == null ||
											partialFailureSupport.equals("0"))
						{
							requestStatus = SOAConstants.FAILURE;
                            if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
							   Debug.log(Debug.MSG_STATUS,	"GenerateSyncResponse3: Generated response for failure Status");
							}
						}
						// If partial failure is turned on
						else
						{
							requestStatus = SOAConstants.PARTIAL_FAILURE;
							if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
							 Debug.log(Debug.MSG_STATUS,	"GenerateSyncResponse4: Generated response for partial failureStatus");
							}
						}
					}

				}
			}

			// If it is a GUI request
			if (requestType != null && requestType.equals(SOAConstants.GUI_REQUEST))
			{
				// Set the errorValue into the output location
				super.set( outputLocation, context, input, errorValue );
				
				// Set the sent status into the output location
				super.set( outLocMessageStatus, context, input, 
										SOAConstants.SENT_STATUS );
				
				// Set the requestStatus into the output location
				super.set( outLocSyncResStatus, context, input, 
												requestStatus );				

				return formatNVPair( input );				
			}
			// If partial failure support is turned off
			else {
				if(partialFailureSupport == null ||
											partialFailureSupport.equals("0"))
				{
					
					String userid = getString("@context.REQUEST_HEADER.UserIdentifier", context, input);
					
					// if request is coming from NT interface
					if(userid.equals("ntuser"))
					{
						if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
							  Debug.log(Debug.MSG_STATUS,	"GenerateSyncResponse1: Generated response failPFSupported for NT Request");
							} 
						
						failPFSupported(errorValue, partialfailureRequestId);
						
						// Set the response into the output location
						super.set( outputLocation, context, input, response.generate() );
						
						// Set the sent status into the output location
						super.set( outLocMessageStatus, context, input, 
													SOAConstants.SENT_STATUS );
						
						// Set the request status into the output location
						super.set( outLocSyncResStatus, context, input, SOAConstants.FAILURE );
					}
					else
					{
						if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
						  Debug.log(Debug.MSG_STATUS,	"GenerateSyncResponse1: Generated response failPFSupported ");
						}
						// Set the errorValue into the output location
						super.set( outputLocation, context, input, errorValue );
						
						// Set the sent status into the output location
						super.set( outLocMessageStatus, context, input, 
												SOAConstants.SENT_STATUS );
						
						// Set the requestStatus into the output location
						super.set( outLocSyncResStatus, context, input, 
														requestStatus );
	
						return formatNVPair( input );
					}
					
				}
				// If partial failure is turned on
				else
				{

					// If it is a complete failure
					if (requestStatus.equals(SOAConstants.FAILURE))
					{
						failPFSupported(errorValue, partialfailureRequestId);
						
					}
					// If it is a partial failure
					else
						partialFailureFormat(errorValue , errorMsg, partialfailureRequestId);
					
					super.set( "@context.ErrorValue", context, input, response.generate() );
				}
			}
			
		}
		// If it is a success request
		else {
			
			requestStatus = SOAConstants.SUCCESS;
			
		}
						
		// If request status is success
		if (requestStatus.equals(SOAConstants.SUCCESS))
		{
			// Calling the successSyncResponse
			successSyncResponse(partialfailureRequestId);
		}			
		
		// Set the response into the output location
		super.set( outputLocation, context, input, response.generate() );
		
		// Set the sent status into the output location
		super.set( outLocMessageStatus, context, input, 
									SOAConstants.SENT_STATUS );
		
		// Set the request status into the output location
		super.set( outLocSyncResStatus, context, input, requestStatus );
		}
		finally
		{
			ThreadMonitor.stop( tmti );
		}
		
		return formatNVPair( input );
	}

	//--------------------------For Testing---------------------------------//

	public static void main (String[] args) {

		Properties props = new Properties();
		props.put( "DEBUG_LOG_LEVELS", "all" );
		props.put( "LOG_FILE", "D:\\logmap.txt" );
		Debug.showLevels();
		Debug.configureFromProperties(props);
		if (args.length != 3) {
			Debug.log(
				Debug.ALL_ERRORS,
				"Synchronus Response:  "
					+ "jdbc:oracle:thin:@192.168.148.34:1521:NOIDADB MOHITSOA MOHITSOA ");
			return;
		}
		try {

			DBInterface.initialize(args[0], args[1], args[2]);
		} catch (DatabaseException e) {
			Debug.log(
				null,
				Debug.MAPPING_ERROR,
				": " + "Database initialization failure: " + e.getMessage());
		}

		GenerateSyncResponse genSyncResponse = new GenerateSyncResponse();

		try {
			genSyncResponse.initialize("FULL_NEUSTAR_SOA_REQUEST", 
												"GenerateSyncResponse");

			MessageProcessorContext mpx = new MessageProcessorContext();

			MessageObject mob = new MessageObject();

			/** Setting Key,Values  for the Message Object  **/

			mob.set("RequestId", "120");

			mob.set("Action", "validate");

			mob.set("RegionId", "");
			
			mob.set("errorMessage",
				"<Error>"+
					"<ruleerrorcontainer>"+
						"<ruleerror>"+
							"<RULE_ID value=\"01\" />"+
							"<MESSAGE value=\"Rejected\" />"+
							"<CONTEXT value=\"SynchronusResponseContext\" />"+
							"<CONTEXT_VALUE value=\"12345\" />"+
						"</ruleerror>"+
						"<ruleerror>"+
							"<RULE_ID value=\"02\" />"+
							"<MESSAGE value=\"Rejected\" />"+
							"<CONTEXT value=\"SynchronusResponseContext\" />"+
							"<CONTEXT_VALUE value=\"54321\" />"+
						"</ruleerror>"+
					"</ruleerrorcontainer>"+
				"</Error>");
			
			genSyncResponse.process( mpx, mob );

			Debug.log( Debug.BENCHMARK, "Context--->" + mpx.describe() );

		} catch ( ProcessingException pex ) {
			Debug.log( Debug.BENCHMARK,pex.getMessage() );
		} catch ( MessageException mex ) {
			Debug.log( Debug.BENCHMARK,mex.getMessage() );
		}
	} //end of main method
}