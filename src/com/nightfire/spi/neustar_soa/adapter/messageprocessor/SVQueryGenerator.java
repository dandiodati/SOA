/**
 * The main objective of this Component is to Generate the 
 * SV Query Message XML object and add it to the context.
 * 
 * <p>
 * This object is populated with the values such as Invoke ID
 * which is generated by the Message Key Sequence Number, 
 * Customer ID, Message Date and Time in GMT format and the
 * Query Expression which is generated by the TN List retrieved
 * from context/message object.
 *
 *<p>
 * @author SUNIL.D
 * @version 1.0
 * @Copyright (c) 2003-04 NeuStar, Inc. All rights reserved. The source code
 * provided herein is the exclusive property of NeuStar, Inc. and is considered
 * to be confidential and proprietary to NeuStar.
 * 
 * @see		com.nightfire.adapter.messageprocessor.DBMessageProcessorBase;
 * @see		com.nightfire.common.ProcessingException;
 * @see		com.nightfire.framework.message.MessageException;
 * @see		com.nightfire.framework.util.Debug;
 * @see		com.nightfire.framework.util.NVPair;
 * @see		com.nightfire.spi.common.driver.MessageObject;
 * @see		com.nightfire.spi.common.driver.MessageProcessorContext;
 * @see		com.nightfire.framework.resource.ResourceException;
 * @see		com.nightfire.framework.db.DBConnectionPool;
 * @see		com.nightfire.framework.db.DatabaseException;
 * @see		com.nightfire.framework.db.DBInterface;
 * @see		com.nightfire.framework.message.generator.xml.XMLMessageGenerator;
 * @see		com.nightfire.spi.neustar_soa.utils.SOAConstants;
 */

/**
	Revision History
	---------------------
	Rev#		Modified By 	Date			Reason
	-----       -----------     ----------		--------------------------
	1			SUNIL.D		18/01/2007		Created
    2			SUNIL.D		07/02/2007		added functions 
	                                            SvInsertNpacQueueBatch&
												SvInsertNpacMessageBatch to
												batch update
 */

package com.nightfire.spi.neustar_soa.adapter.messageprocessor;

import java.util.ArrayList;
import java.util.Properties;
import java.util.TimeZone;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.sql.Connection;
import java.util.StringTokenizer;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.sql.PreparedStatement;
import java.sql.SQLException;


import com.nightfire.adapter.messageprocessor.DBMessageProcessorBase;
import com.nightfire.common.ProcessingException;
import com.nightfire.framework.message.MessageException;
import com.nightfire.framework.message.generator.xml.XMLMessageGenerator;
import com.nightfire.framework.monitor.ThreadMonitor;
import com.nightfire.framework.resource.ResourceException;
import com.nightfire.framework.util.Debug;
import com.nightfire.framework.util.FrameworkException;
import com.nightfire.framework.util.NVPair;
import com.nightfire.spi.common.driver.MessageObject;
import com.nightfire.spi.common.driver.MessageProcessorContext;
import com.nightfire.framework.db.DBConnectionPool;
import com.nightfire.framework.db.DatabaseException;
import com.nightfire.framework.db.DBInterface;
import com.nightfire.framework.db.PersistentSequence;
import com.nightfire.spi.neustar_soa.utils.SOAConstants;
import com.nightfire.spi.neustar_soa.queue.NPACMessageProducer;
import com.nightfire.framework.util.CustomerContext;
import com.nightfire.framework.db.DBLOBUtils;
import com.nightfire.spi.common.driver.Converter;

public class SVQueryGenerator extends DBMessageProcessorBase
{
	/**
	 * The TN list received as input
	 */
	private ArrayList tnList = null;
		
	/**
	 * The reference value of Customer ID
	 */
	private String customerId = null;	
	
	private String primarySpid = null;

	PreparedStatement insertNpacQueueStmt = null;

	PreparedStatement insertNpacMesssageStmt = null;
	
	PreparedStatement getSpidStmt = null;
	
	ResultSet rs = null;


	/**
	 * Class Constructor.
	 */
	public SVQueryGenerator() {
        if ( Debug.isLevelEnabled( Debug.OBJECT_LIFECYCLE ) ){
			Debug.log(
					Debug.OBJECT_LIFECYCLE,
					"Creating SVQueryGenerator message-processor.");
		}

	}

	/**
	 * Initializes this object via its persistent properties.
	 *
	 * @param key Property-key to use for locating initialization properties.
	 * @param type Property-type to use for locating initialization properties.
	 *
	 * @exception ProcessingException when initialization fails
	 */
	public void initialize ( String key, String type )
							throws ProcessingException
	{

		// Call base class method to load the properties.
		super.initialize( key, type );

		// Get configuration properties specific to this processor.
		if( Debug.isLevelEnabled( Debug.SYSTEM_CONFIG ) ){
		 Debug.log( Debug.SYSTEM_CONFIG, "SVQueryGenerator : Initializing..." );
		}

		StringBuffer errorBuffer = new StringBuffer( );		

		customerId = getRequiredPropertyValue(
						SOAConstants.SV_QUERY_GEN_CUST_ID_PROP, errorBuffer );
        if( Debug.isLevelEnabled( Debug.SYSTEM_CONFIG ) ){
		Debug.log( Debug.SYSTEM_CONFIG, "SVQUERYGEN CUSTOMER ID is ["
										+ customerId + "]." );
		}

		
		// If any of required properties are absent, indicate error to caller.
		if ( errorBuffer.length() > 0 )
		{

			String errMsg = errorBuffer.toString( );

			Debug.log( Debug.ALL_ERRORS, errMsg );

			throw new ProcessingException( errMsg );
		}
        if( Debug.isLevelEnabled( Debug.SYSTEM_CONFIG ) ){
		Debug.log( Debug.SYSTEM_CONFIG,
					"SVQueryGenerator : Initialization done." );
		}
	 
	 }  //end of initialize method


	/**
	 * Extract TN List,Custimer ID and XML Location values from the 
	 * context/input, and use them to generate SV Query Message
	 * XML file.creates prepared statement to insert record into
	 * SOA NPAC_QUEUE and NPAC_MESSAGE Tables,through executebatch
	 *
	 * @param  mpContext The context
	 * @param  inputObject  Input message to process.
	 *
	 * @return  An rarray of NVPair objects.
	 *
	 * @exception  ProcessingException  Thrown if processing fails.
	 * @exception  MessageException  Thrown if message is bad.
	 */
	 public NVPair[] process(MessageProcessorContext mpContext,
			MessageObject inputObject)
			throws MessageException, ProcessingException {
		 
		ThreadMonitor.ThreadInfo tmti = null;
		
		if ( inputObject == null )
		{
			return null;
		}
        if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
		 Debug.log(Debug.MSG_STATUS, "SVQueryGenerator : Processing ... ");
		}
		
		Connection dbConn = null;
        
		
		try {
			
			// Get a database connection from the appropriate location - based
			// on transaction characteristics.
			if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
			Debug.log( Debug.MSG_STATUS, "Database logging is "
				+ "transactional, so getting connection from context." );
			}
				
			dbConn = mpContext.getDBConnection( );

			if (dbConn == null) {

			  throw new ProcessingException("DB connection is not available");
			}
            if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
				Debug.log(
					Debug.MSG_STATUS,"Connection Aquired...");
			}

			
		} catch (FrameworkException e) {

			String errMsg =
				"ERROR: SOAMsgKeyDataUpdation: Attempt to get database "
					+ "connection failed with error: "
					+ e.getMessage();

			Debug.log(Debug.ALL_ERRORS, errMsg);

			if (e instanceof MessageException) {

				throw (MessageException) e;

			} else {

				throw new ProcessingException(errMsg);

			}
			
		}
		

		try {
			
			tmti = ThreadMonitor.start( "Message-processor [" + getName() + "] started processing the request" );
			
			String strCustomerId = null;
						
			String queryExpression = null;

			String svQryMsgXML = null;

			//Retrieving Customer ID
			strCustomerId =
			       (String)super.get(customerId, mpContext, inputObject);

			//Retrieving TN List
			tnList = (ArrayList) CustomerContext.getInstance().
			                       get(SOAConstants.OUTOFSYNCTNLIST); 
			
			if(strCustomerId == null){
				
			   throw new ProcessingException(
				 "ERROR: SVQueryGenerator: Failed to Retrieved Customer ID ..");				
			}
			if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
				Debug.log(
					Debug.MSG_STATUS,
					"SVQueryGenerator : Retrieved Customer ID  => "+strCustomerId);
			}

			if(tnList == null){
				
				throw new ProcessingException(
						"ERROR: SVQueryGenerator: Failed Retrieved TN List ..");				
			}
            if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
			Debug.log(
			  Debug.MSG_STATUS,
			  "SVQueryGenerator : TN List Contains Values # => "+tnList.size());
			}

            // Get the primary SPID.
            getSpidStmt = dbConn
					.prepareStatement(SOAConstants.GET_PRIMARY_SPID_QUERY);
            
            getSpidStmt.setString(1, strCustomerId);
            
            rs = getSpidStmt.executeQuery();
            
            while(rs.next()){
            	
            	primarySpid = rs.getString(1);
            	
            }
            if ( Debug.isLevelEnabled( Debug.MSG_STATUS ) ){
				Debug.log( Debug.MSG_STATUS, "Get primarySpid : "+ primarySpid );
            }            
            
			// Get a prepared statement to insert into NPAC_QUEUE Table.
			insertNpacQueueStmt = 
			        dbConn.prepareStatement(SOAConstants.SOA_NPAC_QUEUE_INSERT);

			// Get a prepared statement to insert into NPAC_MESSAGE Table.
			insertNpacMesssageStmt =
			      dbConn.prepareStatement(SOAConstants.SOA_NPAC_MESSAGE_INSERT);

            if ( Debug.isLevelEnabled( Debug.NORMAL_STATUS ) ){
			Debug.log(
			  Debug.NORMAL_STATUS, 
                 "Executing Insert SQL for NPAC_QUEUE:\n" + insertNpacQueueStmt );
			}
            if ( Debug.isLevelEnabled( Debug.NORMAL_STATUS ) ){
    			Debug.log(
    			  Debug.NORMAL_STATUS, 
                     "Executing Insert SQL for NPAC_MESSAGE:\n" + insertNpacMesssageStmt );
    		}
            
			for (int i = 0; i < tnList.size(); i++)
			{
				int id = -1;
				
				// generates the Invoke ID number from the sequence number
				long invokeId = PersistentSequence.getNextSequenceValue( 
				               SOAConstants.NEUSTAR_FULL_SOA_MSG_KEY, false,dbConn );

				 id = PersistentSequence.getNextSequenceValue( 
				               SOAConstants.NPAC_QUEUE_ID , false, dbConn );
				
			 if(invokeId == -1){
					
				throw new ProcessingException(
					 "ERROR: SVQueryGenerator: Failed to Generate Invoke ID");				
				
				}					
				
			if(id == -1){
					
				throw new ProcessingException(
				   "ERROR: SVQueryGenerator: Failed to Generate Npac Queue ID");				
				
				}	
				
				// Generates the SV Query Expression String
				queryExpression = getQueryExpression((String)tnList.get(i));

				//Generating the SV Query Message XML object
				svQryMsgXML = createXMLMessageGenerator( 
				                 invokeId, strCustomerId, queryExpression );

				//Function to batch update for NPAC_QUEUE Table
				SvInsertNpacQueueBatch( insertNpacQueueStmt,invokeId,
				                              svQryMsgXML,strCustomerId,id); 

				
				///Function to batch update NPAC_MASSAGE Table
				SvInsertNpacMessageBatch( insertNpacMesssageStmt,
				                                      invokeId,svQryMsgXML, primarySpid);
			
			}

			int[] insertNpacQueueCount = insertNpacQueueStmt.executeBatch();
            if( Debug.isLevelEnabled(Debug.DB_STATUS) ){
			Debug.log(
			   Debug.DB_STATUS, 
                 "The record(s) has " +
				 "been inserted into the NPAC_QUEUE Table." +
				 "Number of records inserted into NPAC_QUEUE =>"
				  + insertNpacQueueCount.length );
			}

			int[] insertNpacMessageCount = insertNpacMesssageStmt.executeBatch();
		    if( Debug.isLevelEnabled(Debug.DB_STATUS) ){
			Debug.log(
			   Debug.DB_STATUS, 
                  "The NPAC Message(s) has " +
			      "been inserted into the NPAC_MASSAGE Table." +
				  "Number of records inserted into NPAC_MASSAGE =>"
			      + insertNpacMessageCount.length);
			}
			
					
		} catch (DatabaseException dbe) {

			String errMsg =
				"ERROR: SVQueryGenerator : Attempt to retrieve Invoke ID "
					+ " failed with error : "
					+ dbe.getMessage();

			Debug.log(Debug.ALL_ERRORS, errMsg);

			throw new ProcessingException(errMsg);
			
		} catch (ProcessingException e) {

			String errMsg =
				"ERROR: SVQueryGenerator : Attempt to Generate SV Query "
					+ " failed with error : "
					+ e.getMessage();

			Debug.log(Debug.ALL_ERRORS, errMsg);

			throw new ProcessingException(errMsg);
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			
			ThreadMonitor.stop(tmti);
			try {
				if (insertNpacQueueStmt != null) {
					insertNpacQueueStmt.close();
					
					insertNpacQueueStmt = null;
				}
				if (insertNpacMesssageStmt != null)
				{
					insertNpacMesssageStmt.close();
					
					insertNpacMesssageStmt = null;
				}
				if(rs !=null)
				{
					rs.close();
					rs = null;
				}
				if (getSpidStmt != null)
				{
					getSpidStmt.close();
					
					getSpidStmt = null;
				}
			} catch (SQLException sqle) {
				
				Debug.log(Debug.ALL_ERRORS, DBInterface
						.getSQLErrorMessage(sqle));
				
			}

			tnList = null;			

		}
		// Pass the input on to the output.
		return( formatNVPair( inputObject ) );
		
	}



	/**
	 * Returns XMLMessageGenerator object containing 
	 * SV message for SvQueryRequest.
	 *
	 * @param  invokeId  		Invoke ID
	 * @param  customerId 		Customer Id
	 * @param  dateTime 		Date & Time in GMT format
	 * @param  qryExpression    Query Expression
	 * 
	 * @return message XMLMessageGenerator object for SvQueryRequest 
	 *
	 * @exception  MessageException  Thrown on data errors.	 
	 */	
	private String createXMLMessageGenerator(  long invokeId,
		    String strCustomerId, String qryExpression ) 
			throws MessageException, ProcessingException {

		XMLMessageGenerator message = null;

		String msg = null;

		// Returns the Date and Time in GMT format
		String strDateTime = getMsgDateTime();
		
		try {

			message = new XMLMessageGenerator( "SOAMessage");
		
			message.create("messageHeader.session_id");
		
			message.setTextValue("messageHeader.invoke_id",
			                                      String.valueOf(invokeId));
		
			message.setTextValue("messageHeader.customer_id",strCustomerId );

			message.setTextValue("messageHeader.message_date_time",strDateTime );
		
			message.setTextValue("messageContent.SOAtoNPAC." +
				"SubscriptionVersionQueryRequest.query_expression",qryExpression );

			msg = message.getMessage().replaceFirst("<SOAMessage>",
                "<SOAMessage xmlns=\"urn:neustar:lnp:soa:1.0\" " +
				"xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" >");
  	
		
		} catch (MessageException ex){

			String errMsg =
				"ERROR: SVQueryGenerator : Attempt to Generate " 
					+ "XML Query Message failed with error : \n"
					+ ex.getMessage();

			Debug.log(Debug.ALL_ERRORS, errMsg);

			throw new ProcessingException(errMsg);					
			
		}								
            if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
		    Debug.log(
			   Debug.MSG_STATUS,
							"SVQueryGenerator:createXMLMessageGenerator():" +
				            " XML Query Message => \n"+message.getMessage());
			}
					
		return msg;
		
	}


	/**
	 * Returns the Current Date and Time in GMT format.
	 * 
	 * @return strDateTime GMT Date and Time
	 *
	 * @exception  ProcessingException  Thrown on data errors.	 
	 */
	public String getMsgDateTime() throws ProcessingException {
		
		String strDateTime = null;
		
		try{
			
			Debug.log(Debug.MSG_STATUS, "converting local to GMT");
					
			Date date = new Date();
			
			SimpleDateFormat sdf  = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
						
			sdf.setTimeZone( TimeZone.getTimeZone("GMT"));
			
			strDateTime = sdf.format( date );	
						
			
		} catch (Exception ex) {

			String errMsg =
				"ERROR: SVQueryGenerator : Attempt to Generate Message Date Time "
					+ " failed with error : "
					+ ex.getMessage();

			Debug.log(Debug.ALL_ERRORS, errMsg);

			throw new ProcessingException(errMsg);			
		}
		if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
			Debug.log(
				Debug.MSG_STATUS,
				"SVQueryGenerator:getMsgDateTime(): Date and Time => "+strDateTime);
		}

		return strDateTime;
		
	}


	/**
	 * Returns the Query Expression String, generated by the
	 * TN List Values passed as input.
	 * 
	 * @param tnValueList TN List Values
	 * 
	 * @return strQryExp  Query Expression as a string
	 *
	 * @exception  ProcessingException  Thrown on data errors.	 
	 */
	public String getQueryExpression( String telephoneNumber ) 
		                              throws ProcessingException {
				
		String strQryExp =  null;	
				
		try {			

			StringBuffer tnNumber = new StringBuffer();		
			
			tnNumber.append(telephoneNumber.substring(0,3));

			tnNumber.append(telephoneNumber.substring(4,7));

			tnNumber.append(telephoneNumber.substring(8,12));

			strQryExp = "((subscription_version_tn = '" + tnNumber + "'))";					
			
		} catch (Exception ex){

			String errMsg =
				"ERROR: SVQueryGenerator : Attempt to Generate Query Expression "
					+ " failed with error : "
					+ ex.getMessage();

			Debug.log(Debug.ALL_ERRORS, errMsg);

			throw new ProcessingException(errMsg);			
			
		}
		if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){	
			Debug.log(
				Debug.MSG_STATUS,
				"SVQueryGenerator:getQueryExpression():" +
				" Query Expression => \n"+strQryExp);
		}
		
		return strQryExp;
		
	}



/**
	 * This method is to perform a addbatch to Insert 
	 * records into the NPAC_QUEUE table.
	 * 
	 * @param insertNpacQueueStmt
	 * @param invokeId
	 * @param svQryMsgXML
	 * @param strCustomerId
	 * @param id
	 * @throws SQLException
	 * @throws FrameworkException
	 */

	private void SvInsertNpacQueueBatch(PreparedStatement insertNpacQueueStmt,		
		long invokeId, String svQryMsgXML, String strCustomerId, int id) 
		throws SQLException, FrameworkException {
		
		insertNpacQueueStmt.setString( 1, String.valueOf(id));  
		insertNpacQueueStmt.setString( 2, SOAConstants.NPAC_QUEUE_MESSAGE_TYPE );   
		insertNpacQueueStmt.setTimestamp( 3,
		                             new Timestamp(System.currentTimeMillis()) );   
		insertNpacQueueStmt.setInt( 4, 0 );
		insertNpacQueueStmt.setInt( 5, 0 );  
		insertNpacQueueStmt.setString( 6, SOAConstants.NPAC_QUEUE_STATUS );  
		DBLOBUtils.setCLOB( insertNpacQueueStmt, 7,
		                                    Converter.getString( svQryMsgXML ) );   
		insertNpacQueueStmt.setString( 8, String.valueOf(invokeId) );   
		insertNpacQueueStmt.setString( 9, SOAConstants.SOA_SV_MESSAGE );   
		insertNpacQueueStmt.setString( 10, strCustomerId );
        if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
			Debug.log(
				Debug.MSG_STATUS,
				"Adding to the batch SvInsertNpacQueueBatch");
		}

		insertNpacQueueStmt.addBatch(); 	

		
	}


 /**
	 * This method is to perform a addbatch to Insert 
	 * a records into the NPAC_MASSAGE table.
	 * 
	 * @param insertNpacMesssageStmt
	 * @param invokeId
	 * @param svQryMsgXML
	 * @throws SQLException
	 * @throws FrameworkException
	 */

	private void SvInsertNpacMessageBatch(
	     PreparedStatement insertNpacMesssageStmt, long invokeId, 
	     String svQryMsgXML, String spid)
	       throws SQLException,	FrameworkException {
		
		insertNpacMesssageStmt.setString( 1, String.valueOf(invokeId) );		
		insertNpacMesssageStmt.setTimestamp( 2,
		                    new Timestamp(System.currentTimeMillis()) );  
		insertNpacMesssageStmt.setString( 3, SOAConstants.REQUEST );
		DBLOBUtils.setCLOB( insertNpacMesssageStmt, 4,
		                            Converter.getString( svQryMsgXML ) );   
		insertNpacMesssageStmt.setString( 5, SOAConstants.SOA_SV_MESSAGE );   
		insertNpacMesssageStmt.setString( 6, SOAConstants.SV_QUERY_REQUEST );
		insertNpacMesssageStmt.setString( 7, spid );
        if( Debug.isLevelEnabled(Debug.MSG_STATUS) ){
		Debug.log(
			Debug.MSG_STATUS,
			"Adding to the batch SvInsertNpacMessageBatch");
		}

		insertNpacMesssageStmt.addBatch(); 		
		
	}

	//--------------------------For Testing---------------------------------//

	public static void main(String[] args) {

		Properties props = new Properties();

		props.put("DEBUG_LOG_LEVELS", "ALL");

		props.put("LOG_FILE", "C:\\SOA_LOG\\log_soa.txt");

		Debug.showLevels();

		Debug.configureFromProperties(props);

		if (args.length != 3)
		{
			 Debug.log (Debug.ALL_ERRORS, "SVQueryGenerator: USAGE:  "+
			 " jdbc:oracle:thin:@192.168.1.7:1521:FULLSOA peter peter");

			return;
		}		
		
		try {

			DBInterface.initialize(args[0], args[1], args[2]);
			
			Debug.log(
				Debug.MSG_STATUS,"DBInterface.initialize success....");

		} catch (DatabaseException e) {

			Debug.log(
				null,
				Debug.MAPPING_ERROR,
				": " + "Database initialization failure: " + e.getMessage());

		}

		try {
			
			SVQueryGenerator svQryGen = new SVQueryGenerator();
		
			svQryGen.initialize("FULL_NEUSTAR_SOA", "SVQueryGenerator");
			
			MessageProcessorContext mpx = new MessageProcessorContext();
			
			MessageObject mob = new MessageObject();

			svQryGen.process(mpx, mob);
			
			Debug.log(Debug.BENCHMARK, "Context--->" + mpx.describe());
			
			Debug.log(Debug.BENCHMARK, "Process Executed...");


		} catch (ProcessingException pex) {

			String errMsg =
				"ERROR: SVQueryGenerator: ProcessingException Caught in main()	: "
					+ pex.getMessage();

			Debug.log(Debug.ALL_ERRORS, errMsg);

			System.out.println(
				"ERROR: SVQueryGenerator: ProcessingException Caught in main()	: "
					+ pex.getMessage());

		} catch (MessageException mex) {

			String errMsg =
				"ERROR: SVQueryGenerator: MessageException Caught in main()	: "
					+ mex.getMessage();

			Debug.log(Debug.ALL_ERRORS, errMsg);

			System.out.println(
				"ERROR: SVQueryGenerator: MessageException Caught in main()	: "
					+ mex.getMessage());

		}
		
	} //end of main method
	
}