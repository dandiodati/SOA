package com.nightfire.comms.ia3.asn.issue3; // machine generated code. DO NOT EDIT

import cryptix.asn1.lang.*;

public class IaReceiptMessage extends Sequence {

   // Constructor(s)
   // -------------------------------------------------------------------------

   /**
    * Constructs a new instance of this type with a blank Name.
    */
   public IaReceiptMessage() {
      super("", new Tag(Tag.SEQUENCE));
   }

   /**
    * Constructs a new instance of this type with a designated Name.
    *
    * @param name the designated Name for this new instance.
    */
   public IaReceiptMessage(String name) {
      super(name, new Tag(Tag.SEQUENCE));
   }

   /**
    * Constructs a new instance of this type with a designated Name and Tag.
    *
    * @param name the designated Name for this new instance.
    * @param tag the designated tag for this new instance.
    */
   public IaReceiptMessage(String name, Tag tag) {
      super(name, tag);
   }

   /**
    * Constructs a new instance of this type with a trivial Name and an
    * initial value.
    *
    * @param value the initial value of this instance.
    */
   public IaReceiptMessage(Sequence value) {
      this("", value);
   }

   /**
    * Constructs a new instance of this type with a designated Name and an
    * initial value.
    *
    * @param name the designated Name for this new instance.
    * @param value the initial value of this instance.
    */
   public IaReceiptMessage(String name, Sequence value) {
      this(name, new Tag(Tag.SEQUENCE), value);
   }

   /**
    * Constructs a new instance of this type given its Name, Tag and initial
    * value.
    *
    * @param name the designated Name for this new instance.
    * @param tag the specific tag for this instance.
    * @param value the initial value for this instance.
    */
   public IaReceiptMessage(String name, Tag tag, Sequence value) {
      super(name, tag, value == null ? null : value.value());
   }

   // Constants and variables
   // -------------------------------------------------------------------------


   // Over-loaded implementation of methods defined in superclass
   // -------------------------------------------------------------------------

   protected void initInternal() {
      super.initInternal();

      IType uniqueIdentifier = new UniqueIdentifier("uniqueIdentifier");
      components.add(uniqueIdentifier);
      IType dateTimeStamp = new PrintableString("dateTimeStamp");
      components.add(dateTimeStamp);
      IType enhancements = new Enhancements("enhancements");
      enhancements.optional(true);
      components.add(enhancements);
   }

   // Accessor methods
   // -------------------------------------------------------------------------

   public UniqueIdentifier getUniqueIdentifier() {
      return (UniqueIdentifier) components.get(0);
   }

   public void setUniqueIdentifier(UniqueIdentifier obj) {
      UniqueIdentifier it = getUniqueIdentifier();
      it.value(obj.value());
      components.set(0, it);
   }

   public PrintableString getDateTimeStamp() {
      return (PrintableString) components.get(1);
   }

   public void setDateTimeStamp(PrintableString obj) {
      PrintableString it = getDateTimeStamp();
      it.value(obj.value());
      components.set(1, it);
   }

   public Enhancements getEnhancements() {
      return (Enhancements) components.get(2);
   }

   public void setEnhancements(Enhancements obj) {
      Enhancements it = getEnhancements();
      it.value(obj.value());
      components.set(2, it);
   }

}

// Generated by the cryptix ASN.1 kit on Tue Aug 24 11:57:40 PDT 2004
