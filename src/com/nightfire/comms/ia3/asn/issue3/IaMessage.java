package com.nightfire.comms.ia3.asn.issue3; // machine generated code. DO NOT EDIT

import cryptix.asn1.lang.*;

public class IaMessage extends Choice {

   // Constructor(s)
   // -------------------------------------------------------------------------

   /**
    * Constructs a new instance of this type with a blank Name.
    */
   public IaMessage() {
      super("", null);
   }

   /**
    * Constructs a new instance of this type with a designated Name.
    *
    * @param name the designated Name for this new instance.
    */
   public IaMessage(String name) {
      super(name, null);
   }

   /**
    * Constructs a new instance of this type with a designated Name and Tag.
    *
    * @param name the designated Name for this new instance.
    * @param tag the designated tag for this new instance.
    */
   public IaMessage(String name, Tag tag) {
      super(name, tag);
   }

   /**
    * Constructs a new instance of this type with a trivial Name and an
    * initial value.
    *
    * @param value the initial value of this instance.
    */
   public IaMessage(Choice value) {
      this("", value);
   }

   /**
    * Constructs a new instance of this type with a designated Name and an
    * initial value.
    *
    * @param name the designated Name for this new instance.
    * @param value the initial value of this instance.
    */
   public IaMessage(String name, Choice value) {
      this(name, null, value);
   }

   /**
    * Constructs a new instance of this type given its Name, Tag and initial
    * value.
    *
    * @param name the designated Name for this new instance.
    * @param tag the specific tag for this instance.
    * @param value the initial value for this instance.
    */
   public IaMessage(String name, Tag tag, Choice value) {
      super(name, tag, value == null ? null : value.value());
   }

   // Constants and variables
   // -------------------------------------------------------------------------


   // Over-loaded implementation of methods defined in superclass
   // -------------------------------------------------------------------------

   protected void initInternal() {
      super.initInternal();

      IType basicMessage = new BasicMessage("basicMessage",  new Tag( Tag.CONTEXT, 0, false ) );
      components.add(basicMessage);
      IType iaStatusMessage = new IaStatusMessage("iaStatusMessage" );
      components.add(iaStatusMessage);
      IType enhancedMessage = new EnhancedMessage("enhancedMessage" );
      components.add(enhancedMessage);
   }

   // Accessor methods
   // -------------------------------------------------------------------------

   public BasicMessage getBasicMessage() {
      return (BasicMessage) components.get(0);
   }

   public void setBasicMessage(BasicMessage obj) {
      BasicMessage it = getBasicMessage();
      it.value(obj.value());
      components.set(0, it);
   }

   public IaStatusMessage getIaStatusMessage() {
      return (IaStatusMessage) components.get(1);
   }

   public void setIaStatusMessage(IaStatusMessage obj) {
      IaStatusMessage it = getIaStatusMessage();
      it.value(obj.value());
      components.set(1, it);
   }

   public EnhancedMessage getEnhancedMessage() {
      return (EnhancedMessage) components.get(2);
   }

   public void setEnhancedMessage(EnhancedMessage obj) {
      EnhancedMessage it = getEnhancedMessage();
      it.value(obj.value());
      components.set(2, it);
   }

   // CHOICE-specific convenience methods
   // -------------------------------------------------------------------------

   /**
    * Returns true iff this CHOICE instance has been decoded, and its (only)
    * concrete alternative is the designated one. False otherwise.
    *
    * @return true iff this CHOICE instance has been decoded, and its (only)
    * concrete alternative is the designated one. False otherwise.
    */
   public boolean isBasicMessage() {
      return !getBasicMessage().isBlank();
   }
   /**
    * Returns true iff this CHOICE instance has been decoded, and its (only)
    * concrete alternative is the designated one. False otherwise.
    *
    * @return true iff this CHOICE instance has been decoded, and its (only)
    * concrete alternative is the designated one. False otherwise.
    */
   public boolean isIaStatusMessage() {
      return !getIaStatusMessage().isBlank();
   }
   /**
    * Returns true iff this CHOICE instance has been decoded, and its (only)
    * concrete alternative is the designated one. False otherwise.
    *
    * @return true iff this CHOICE instance has been decoded, and its (only)
    * concrete alternative is the designated one. False otherwise.
    */
   public boolean isEnhancedMessage() {
      return !getEnhancedMessage().isBlank();
   }
}

// Generated by the cryptix ASN.1 kit on Tue Aug 24 11:57:39 PDT 2004
